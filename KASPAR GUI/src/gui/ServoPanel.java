/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ServoPanel2.java
 *
 * Created on 28-Sep-2010, 18:22:52
 */
package gui;

import data.Robot;
import data.Servo;
import data.ServoPosition;
import java.awt.event.ItemEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import managers.ServoManager;

/**
 *
 * @author Sven
 */
public class ServoPanel extends javax.swing.JPanel implements PropertyChangeListener {

    // Servo which is controlled by this panel
    private Servo servo;
    private servos.Servo hardwareServo;
    private boolean suppressEvents;

    public ServoPanel(Robot robot, Servo servo) {

        suppressEvents = false;
        this.servo = servo;
        this.hardwareServo = ServoManager.getServo(robot, servo);
        

        initComponents();

        // React to events of the speed textfield and changes of the servo's position
        txtSpeed.addPropertyChangeListener("text", this);
        servo.addPropertyChangeListener("currentPosition", this);

        // TODO Pose waiting for servo to finish not yet implemented
        cbxWait.setEnabled(false);
        cbxWait.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        sldPosition = new javax.swing.JSlider();
        lblName = new javax.swing.JLabel();
        cbxActive = new javax.swing.JCheckBox();
        lblPosition = new javax.swing.JLabel();
        txtSpeed = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbxWait = new javax.swing.JCheckBox();

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setPreferredSize(new java.awt.Dimension(180, 98));

        sldPosition.setMajorTickSpacing((int)this.servo.getMaxPosition()/4);
        sldPosition.setMaximum((int)this.servo.getMaxPosition());
        sldPosition.setMinorTickSpacing((int)this.servo.getMaxPosition()/20);
        sldPosition.setPaintTicks(true);
        sldPosition.setToolTipText("Set Goal Position");
        sldPosition.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldPositionStateChanged(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblName.setText(servo.getName());

        cbxActive.setSelected(true);
        cbxActive.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxActiveItemStateChanged(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sldPosition, org.jdesktop.beansbinding.ELProperty.create("${value}"), lblPosition, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        txtSpeed.setColumns(2);
        txtSpeed.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSpeed.setText(servo.getDefaultSpeed()+"");

        jLabel3.setText("Speed:");

        cbxWait.setText("Wait:");
        cbxWait.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        cbxWait.setMaximumSize(new java.awt.Dimension(100, 23));
        cbxWait.setMinimumSize(new java.awt.Dimension(70, 23));
        cbxWait.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxWaitItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sldPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPosition))
                    .addComponent(cbxActive)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxWait, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxActive)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sldPosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxWait, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void cbxActiveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxActiveItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            setActive(true);
        } else {
            setActive(false);
        }
    }//GEN-LAST:event_cbxActiveItemStateChanged

    private void cbxWaitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxWaitItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // TODO Wait for servo to finish
        } else {
            // TODO
        }
    }//GEN-LAST:event_cbxWaitItemStateChanged

    private void sldPositionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldPositionStateChanged
        // Somebody moved the slider so tell servo to move to new position
        // with the speed given in the box. If speed is given as 0, use defaultSpeed

        // don't act if we've been told to suppress change events
        if (!suppressEvents) {
            int speed = Integer.parseInt(txtSpeed.getText());
            if (speed == 0) {
                speed = servo.getDefaultSpeed();
            }

            // Now set position
            hardwareServo.setPosition(sldPosition.getValue(), speed);
            if (!hardwareServo.hasContinuousUpdates()) {
                lblPosition.setText(sldPosition.getValue() + "");
            }
        }
    }//GEN-LAST:event_sldPositionStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbxActive;
    private javax.swing.JCheckBox cbxWait;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JSlider sldPosition;
    private javax.swing.JTextField txtSpeed;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public Servo getServo() {
        return servo;
    }

    public boolean isActive() {
        return sldPosition.isEnabled();
    }

    public void setActive(boolean state) {

        // Add servo to list that should be updated and enable slider
        // DISABLED Display doesn't show current positions for now.
        //Servos.continuousUpdate(servo, state);
        sldPosition.setEnabled(state);
        txtSpeed.setEnabled(state);
        cbxActive.setSelected(state);

        // TODO Pose waiting for servo to finish not yet implemented
        cbxWait.setEnabled(false);
    }

    public ServoPosition getServoData() {

        return new ServoPosition(
                servo.getName(),
                sldPosition.getValue(),
                Integer.parseInt(txtSpeed.getText()),
                cbxWait.isSelected());
    }

    public void setServoData(ServoPosition sPos) {

        if (sPos.getServoName().equals(this.servo.getName())) {
            // make sure slider doesn't fire change event while we adjust value to avoid a servo command to Kaspar
            suppressEvents = true;
            hardwareServo.setPosition(sPos.getPosition(), sPos.getSpeed());
            
            sldPosition.setValue(sPos.getPosition());
            if (!hardwareServo.hasContinuousUpdates()) {
                lblPosition.setText(sldPosition.getValue() + "");
            }
            
            suppressEvents = false;

            // And set the other things as well which doesn't fire change events
            this.cbxWait.setSelected(sPos.getWaitForComplete());
            this.txtSpeed.setText(sPos.getSpeed() + "");
        } else {
            GuiLogger.getLogger().log(Level.WARNING, "Trying to set data for wrong ServoPanel!");
        }

    }

    public void update() {
        sldPosition.setValue(hardwareServo.getPosition());
        lblPosition.setText(hardwareServo.getPosition() + "");
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

        // Check which object changed its property
        if (evt.getSource() == hardwareServo) {
            // The currentPosition of the servo changed, so update label
            lblPosition.setText(hardwareServo.getPosition() + "");
        } else if (evt.getSource() == txtSpeed) {
            // Make sure user entered value in valid range [0,1000]
            int value = Integer.parseInt(txtSpeed.getText());
            if (value > this.servo.getMaxPosition()) {
                txtSpeed.setText(this.servo.getMaxPosition() + "");
            } // if user enters "0" then substitute with default speed for servo
            else if (value <= 0) {
                txtSpeed.setText(servo.getDefaultSpeed() + "");
            }
        }
    }
}
