/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.editors;

import gui.animator;
import java.awt.Component;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author nathan
 */
public class EditorDialog extends javax.swing.JFrame implements ComponentListener {

    private int currentPanelIndex = -1;
    private List<JPanel> panels;

    /**
     * Creates new form EditorDialog
     */
    public EditorDialog() {
        initComponents();
        panels = new LinkedList<JPanel>();
        this.addComponentListener(this);
    }

    public void addPanel(JPanel newPanel) {
        this.panels.add(newPanel);
        this.centerPanelsOn(this.panels.size() - 1);
    }

    private void centerPanelsOn(int index) {

        if (index != currentPanelIndex) {
            this.jPanelPrevious.removeAll();
            this.jPanelCurrent.removeAll();
            this.jPanelNext.removeAll();

            int prevPanelIndex = index - 1;
            int nextPanelIndex = index + 1;

            if (prevPanelIndex >= 0) {
                JPanel prev = this.panels.get(prevPanelIndex);
                for(Component c: prev.getComponents()) {
                    c.setEnabled(false);
                }
                
                this.jPanelPrevious.add(prev);
                this.jPanelPrevious.setVisible(true);
            } else {
                this.jPanelPrevious.setVisible(false);
            }

            JPanel curr = this.panels.get(index);
            for(Component c: curr.getComponents()) {
                c.setEnabled(true);
            }
            
            this.jPanelCurrent.add(curr);
            this.currentPanelIndex = index;

            if (nextPanelIndex < this.panels.size()) {
                JPanel next = this.panels.get(nextPanelIndex);
                for(Component c: next.getComponents()) {
                    c.setEnabled(false);
                }

                this.jPanelNext.add(next);
                this.jPanelNext.setVisible(true);
            } else {
                this.jPanelNext.setVisible(false);
            }

            animator a = new animator(this, animator.setGetSizeChange(this, this.jPanelCurrent));
            new Thread(a).start();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPrevious = new javax.swing.JPanel();
        jPanelCurrent = new javax.swing.JPanel();
        jPanelNext = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanelPrevious.setBackground(new java.awt.Color(235, 77, 77));
        jPanelPrevious.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelPreviousMouseClicked(evt);
            }
        });
        jPanelPrevious.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanelPrevious);

        jPanelCurrent.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanelCurrent);

        jPanelNext.setBackground(new java.awt.Color(78, 78, 229));
        jPanelNext.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelNext.setPreferredSize(new java.awt.Dimension(655, 20));
        jPanelNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelNextMouseClicked(evt);
            }
        });
        jPanelNext.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanelNext);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanelNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelNextMouseClicked
        this.centerPanelsOn(this.currentPanelIndex + 1);
    }//GEN-LAST:event_jPanelNextMouseClicked

    private void jPanelPreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelPreviousMouseClicked
        this.centerPanelsOn(this.currentPanelIndex - 1);
    }//GEN-LAST:event_jPanelPreviousMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorDialog().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelCurrent;
    private javax.swing.JPanel jPanelNext;
    private javax.swing.JPanel jPanelPrevious;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentResized(ComponentEvent ce) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void componentMoved(ComponentEvent ce) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void componentShown(ComponentEvent ce) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void componentHidden(ComponentEvent ce) {
        if (JPanel.class.isInstance(ce.getComponent())) {
            JPanel closedPanel = (JPanel) ce.getComponent();
            if (closedPanel == this.panels.get(this.currentPanelIndex)) {
                while (this.currentPanelIndex - 1 < this.panels.size()) {
                    //Close everything to the right
                    JPanel temp = this.panels.get(this.panels.size() - 1);
                    temp.setVisible(false);
                    this.panels.remove(this.panels.size() - 1);
                }

                if (this.currentPanelIndex > 0) {
                    this.centerPanelsOn(this.currentPanelIndex - 1);
                } else {
                    this.currentPanelIndex = -1;
                    this.setVisible(false);
                }
            }
        }
    }
}
