/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KasparConfigPanel.java
 *
 * Created on 05-Feb-2011, 18:06:13
 */
package gui;

import data.GUIButton;
import data.User;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import managers.PanelManager;
import managers.SessionManager;

/**
 *
 * @author Sven
 */
public class KeyMapPanel extends javax.swing.JPanel {

    private Set<User> users = new HashSet<User>();
    private DefaultListModel keymapModel;
    private KeyTableModel keyMapTM;
    private User currentUser;

    /**
     * Creates new form KasparConfigPanel
     */
    public KeyMapPanel() {

        // Load KeyMaps
        this.keymapModel = new DefaultListModel();
        updateKeyMaps();
        if (this.keymapModel.isEmpty()) {
            this.currentUser = new User();
        } else {
            this.currentUser = (User) this.keymapModel.firstElement();
        }
        this.keyMapTM = new KeyTableModel(this.currentUser);

        initComponents();

        this.tblKeyMap.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (tblKeyMap.getSelectedRow() != -1) {
                    btnRemove.setEnabled(true);
                    btnRemoveAll.setEnabled(true);
                } else {
                    btnRemove.setEnabled(false);
                    btnRemoveAll.setEnabled(false);
                }
            }
        });

        this.tblKeyMap.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (currentUser.getButtons().size() > 0 && !currentUser.getName().isEmpty()) {
                    btnSave.setEnabled(true);
                }
            }
        });

        this.lstSequences.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    btnAddActionPerformed(null);
                } else {
                    if (lstSequences.getSelectedIndex() != -1) {
                        btnAdd.setEnabled(true);
                    } else {
                        btnAdd.setEnabled(false);
                    }
                }
            }
        });

        // Catch list chanegs in sequence list to adjust buttons and to add sequence to table
        this.lstKeyMaps.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (lstKeyMaps.getSelectedIndex() != -1) {
                    setUser((User) lstKeyMaps.getSelectedValue());
                }
            }
        });

        setUser(null);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlButtons = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblKeyMap = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnSaveAs = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlKeyMaps = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstKeyMaps = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstSequences = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblKeyMap = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRemoveAll = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setName("KeyMaps"); // NOI18N

        pnlButtons.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel2.setText("Key Map:");

        lblKeyMap.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblKeyMap.setText("jLabel2");

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnSaveAs.setText("Save As...");
        btnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlButtonsLayout = new org.jdesktop.layout.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlButtonsLayout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblKeyMap, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlButtonsLayout.createSequentialGroup()
                        .add(btnSave)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 10, Short.MAX_VALUE)
                        .add(btnSaveAs)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblKeyMap))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSave)
                    .add(btnSaveAs)
                    .add(btnDelete))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlKeyMaps.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Available KeyMaps", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        lstKeyMaps.setModel(keymapModel);
        lstKeyMaps.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lstKeyMaps);

        org.jdesktop.layout.GroupLayout pnlKeyMapsLayout = new org.jdesktop.layout.GroupLayout(pnlKeyMaps);
        pnlKeyMaps.setLayout(pnlKeyMapsLayout);
        pnlKeyMapsLayout.setHorizontalGroup(
            pnlKeyMapsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlKeyMapsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlKeyMapsLayout.setVerticalGroup(
            pnlKeyMapsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlKeyMapsLayout.createSequentialGroup()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setText("Available Sequences:");

        lstSequences.setModel(PanelManager.getSequenceListModel());
        lstSequences.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstSequences.setMinimumSize(new java.awt.Dimension(200, 0));
        jScrollPane1.setViewportView(lstSequences);

        tblKeyMap.setModel(keyMapTM);
        tblKeyMap.setMinimumSize(new java.awt.Dimension(200, 0));
        tblKeyMap.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(tblKeyMap);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        btnAdd.setText(Character.toString('\u25B6'));
        btnAdd.setToolTipText("Add");
        btnAdd.setAlignmentX(0.5F);
        btnAdd.setAlignmentY(0.0F);
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(Box.createVerticalGlue());
        jPanel1.add(btnAdd);
        jPanel1.add(Box.createVerticalStrut(5));

        btnRemove.setText(Character.toString('\u25C0'));
        btnRemove.setToolTipText("Add");
        btnRemove.setAlignmentX(0.5F);
        btnRemove.setAlignmentY(0.0F);
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove);
        jPanel1.add(Box.createVerticalStrut(5));

        btnRemoveAll.setText(Character.toString('\u21C7'));
        btnRemoveAll.setToolTipText("Add");
        btnRemoveAll.setAlignmentX(0.5F);
        btnRemoveAll.setAlignmentY(0.0F);
        btnRemoveAll.setEnabled(false);
        btnRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemoveAll);
        jPanel1.add(Box.createVerticalGlue());

        jLabel3.setText("Key Map:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jScrollPane1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(pnlKeyMaps, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pnlButtons, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(pnlButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlKeyMaps, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        save();
}//GEN-LAST:event_btnSaveActionPerformed

    private void btnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsActionPerformed
        saveAs();
}//GEN-LAST:event_btnSaveAsActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        SessionManager.delete(currentUser);
        setUser(null);
        updateKeyMaps();
        //TODO: Property update events
        //KasparGui.getInstance().keyMapChanged();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        if (!lstSequences.isSelectionEmpty()) {
            //currentUser.addKeys(new String[0], KasparSequence.getSequence((String) lstSequences.getSelectedValue()));
            keyMapTM.setKeyMap(currentUser);
            updateKeyMapButtons();
        }
}//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeRows(tblKeyMap.getSelectedRow(), 1);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllActionPerformed
        removeRows(0, tblKeyMap.getRowCount());
    }//GEN-LAST:event_btnRemoveAllActionPerformed

    /**
     * Save currently opened sequence. If the sequence is new, saveAs() is
     * called first
     */
    private void save() {
        SessionManager.save(currentUser);

        // Update all sequences and the list
        updateKeyMaps();

        // Inform others that the sequence list has changed
        //TODO: Property update events
        //KasparGui.getInstance().keyMapChanged();

        btnSave.setEnabled(false);
    }

    /**
     * Save currently opened sequences and query user for file name. Makes use
     * of save() to save the sequence after a name was given
     */
    private void saveAs() {

        // Ask user for name
        String name;
        name = (String) JOptionPane.showInputDialog(
                this,
                "Name of keymap: ",
                "Save KeyMap",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                "");

        // Check whether we have a valid name
        // TODO Could check for special characters!
        if (name == null || name.equals("")) {
            GuiLogger.getLogger().log(Level.WARNING, "Invalid name for keymap: {0}!", name);
            return;
        }

        // Update sequences and call save
        currentUser.setName(name);
        lblKeyMap.setText(name);
        save();
    }

    private void removeRows(int firstRow, int count) {


        if (firstRow > -1) {
            for (int i = firstRow; i < (firstRow + count); i++) {
                currentUser.getButtons().remove(i);
            }
            keyMapTM.fireTableDataChanged();
        }
        updateKeyMapButtons();
    }

    /**
     * Gets the list of sequences saved in KasparSequence. It doesn't force a
     * reload of all sequences but KasparSequence should take care of reloading
     * if needed
     */
    private void loadKeyMaps() {

        // Clear and refill HashMap
        users.clear();
        for (User kMap : SessionManager.getCurrentInteraction().getUsers()) {
            users.add(kMap);
        }
    }

    /**
     * Update the sequence list and make sure GUI is up to date. Method clears
     * and refills the sequence list model
     */
    public final void updateKeyMaps() {

        keymapModel.clear();
        // make sure sequences are up to date
        loadKeyMaps();
        // Sort sequences
        LinkedList<User> maps = new LinkedList<User>();
        maps.addAll(users);
        Collections.sort(maps);

        // add sequences to table
        for (User s : maps) {
            keymapModel.addElement(s);
        }
    }

    /**
     * Make sequence list model available for other panels. List can be updated
     * by calling updateSequences()
     *
     * @return List model containing all sequences
     */
    public DefaultListModel getKeyMapListModel() {
        return keymapModel;
    }

    /**
     * Make the given sequence the currently used sequence. Enables/disables
     * buttons and shows sequence steps in the step table
     *
     * @param seqName Name of the sequence to be set. If name does not appear in
     * list of current sequences a unnamed sequence is created and used instead
     */
    private void setUser(User user) {

        if (user != null) {
            currentUser = user;
            keyMapTM.setKeyMap(user);
            lblKeyMap.setText(currentUser.getName());
            btnSaveAs.setEnabled(true);
            btnDelete.setEnabled(true);
        } else {
            currentUser = new User();
            lblKeyMap.setText("Unnamed User");
            keyMapTM.setKeyMap(currentUser);
            btnSave.setEnabled(false);
            btnDelete.setEnabled(false);
            btnSaveAs.setEnabled(false);
        }
    }

    private void updateKeyMapButtons() {

        btnSave.setEnabled(false);
        btnSaveAs.setEnabled(true);
        btnDelete.setEnabled(true);
        btnAdd.setEnabled(false);
        btnRemove.setEnabled(false);
        btnRemoveAll.setEnabled(true);

        if (!currentUser.getName().isEmpty()) {
            btnSave.setEnabled(true);
            btnDelete.setEnabled(true);
        }

        if (currentUser.getButtons().isEmpty()) {
            btnSaveAs.setEnabled(false);
            btnDelete.setEnabled(false);
            btnRemoveAll.setEnabled(false);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveAll;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveAs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblKeyMap;
    private javax.swing.JList lstKeyMaps;
    private javax.swing.JList lstSequences;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlKeyMaps;
    private javax.swing.JTable tblKeyMap;
    // End of variables declaration//GEN-END:variables

    /**
     * Table model used to create the sequence step table
     */
    private class KeyTableModel extends DefaultTableModel {

        // keyMap to be shown
        User keyMap;
        List<GUIButton> sortedSeqs;
        String[] columnNames = {"Sequence", "Key(s) (comma-seperated)"};

        /**
         * Constructor. Shows the steps of the given key map
         *
         * @param keyMap
         */
        public KeyTableModel(User keyMap) {
            super();
            this.keyMap = keyMap;
        }

        /**
         * Change the keyMap to the given one
         *
         * @param keyMap KeyMap to be shown
         */
        public void setKeyMap(User keyMap) {
            this.keyMap = keyMap;
            sortedSeqs = keyMap.getButtons();

            fireTableDataChanged();
        }

        @Override
        public int getRowCount() {
            if (keyMap != null) {
                return keyMap.getButtons().size();
            } else {
                return 0;
            }
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return columnNames[columnIndex];
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return User.class;
            } else if (columnIndex == 1) {
                return String.class;
            } else {
                return Object.class;
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                return true;
            }
            return false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return sortedSeqs.get(rowIndex);
                case 1:
                    Set<String> keys = sortedSeqs.get(rowIndex).getHotKeys();
                    StringBuilder sb = new StringBuilder();
                    for (String key : keys) {
                        sb.append(key).append(',');
                    }
                    return sb.toString().substring(0, sb.length() - 1);
                default:
                    return "";
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                // We got a comma seperated list of keys, so remove errors first
                String[] gotKeys = ((String) aValue).split(",");
                ArrayList<String> keys = new ArrayList<String>();
                for (String s : gotKeys) {
                    s = s.trim();
                    KeyStroke ks;
                    if (s.length() == 1) {
                        ks = KeyStroke.getKeyStroke(s.toCharArray()[0]);
                    } else {
                        ks = KeyStroke.getKeyStroke(s);
                    }
                    if (ks != null) {
                        keys.add(s);
                    } else {
                        GuiLogger.getLogger().log(Level.WARNING, "Invalid key entered: {0}", s);
                    }
                }

                sortedSeqs.get(rowIndex).getHotKeys().clear();
                sortedSeqs.get(rowIndex).getHotKeys().addAll(keys);
                fireTableCellUpdated(rowIndex, columnIndex);
            }
        }
    }
}
