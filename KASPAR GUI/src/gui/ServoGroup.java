/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KasparPoseGroup.java
 *
 * Created on 04-Oct-2010, 16:51:51
 */
package gui;

import data.Robot;
import data.Servo;
import java.awt.Component;
import java.util.Set;
import java.util.logging.Level;
import runners.ServoRunner;

/**
 *
 * @author Sven
 */
public class ServoGroup extends javax.swing.JPanel {

    private String name;
    private int column;
    private int row;
    private boolean manPos;
    private data.ServoGroup group;
    private ServoRunner runner;

    /**
     * Creates new form KasparPoseGroup
     *
     * @param servoGroup
     * @param allPanels
     */
    public ServoGroup(Robot robot, data.ServoGroup servoGroup, Set<ServoPanel> allPanels) {

        this.group = servoGroup;
        this.runner = new ServoRunner(robot);

        // Read in group info
        // Read group name
        name = servoGroup.getTitle();

        // Get position where to place the group in the grid
        column = servoGroup.getLocationX();
        row = servoGroup.getLocationY();

        manPos = true;

        // Get all members of the group
        // Poses are naturally ordered by their position in the list
        for (Servo servo : servoGroup.getServos()) {
            //TODO: Support groups where some servos are positionable
            manPos = manPos & servo.getServoType().isPositionable();
            
            // Get all memebrs of group and sort them into the array
            ServoPanel panel = null;
            for(ServoPanel s: allPanels) {
                if(s.getName() == null ? servo.getName() == null : s.getServo().getName().equals(servo.getName())) {
                    panel = s;
                    break;
                }
            }

            pnlPanels.add(panel);
            if (panel == null && !servo.getName().toUpperCase().equals("BLANK")) {
                GuiLogger.getLogger().log(Level.SEVERE, "Unknown servo ''{0}'' in servo group {1}", new Object[]{servo.getName(), name});
            }
        }

        initComponents();
        lblName.setText(name);

        // And activate button if the group allows for manual positioning
        btnSet.setEnabled(manPos);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        pnlPanels = new javax.swing.JPanel();
        btnSet = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblName.setText("group");

        pnlPanels.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 2, 2, 2));
        pnlPanels.setLayout(new javax.swing.BoxLayout(pnlPanels, javax.swing.BoxLayout.PAGE_AXIS));

        btnSet.setText("Free");
        btnSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(lblName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnSet)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlPanels, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblName)
                    .add(btnSet))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPanels, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function is used if manual positioning is allowed (button has to be
     * inactive otherwise) Depending on the state switches the torque of the
     * servos in this group on or off
     *
     * @param evt Action event of the button
     */
    private void btnSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetActionPerformed
        if (btnSet.getText().equals("Free")) {
            // Switch torque off to manual position servos
            this.runner.enableManualPositioning(group.getServos().toArray(new Servo[0]));
            btnSet.setText("Set");
        } else {
            // Switch torque back on
            this.runner.disableManualPositioning(group.getServos().toArray(new Servo[0]));

            // And update all panels of this group with new values from servo
            for (Component sp : pnlPanels.getComponents()) {
                if (sp instanceof ServoPanel) {
                    ((ServoPanel) sp).update();
                }
            }
            
            btnSet.setText("Free");
        }
    }//GEN-LAST:event_btnSetActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSet;
    private javax.swing.JLabel lblName;
    private javax.swing.JPanel pnlPanels;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the name
     */
    @Override
    public String getName() {
        return name;
    }

    /**
     * @return the column
     */
    public int getColumn() {
        return column;
    }

    /**
     * @return the row
     */
    public int getRow() {
        return row;
    }

    /**
     * @return the manPos
     */
    public boolean getManPos() {
        return manPos;
    }
}
