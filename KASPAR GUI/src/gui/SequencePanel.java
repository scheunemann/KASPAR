/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KasparSequencePanel2.java
 *
 * Created on 02-Feb-2011, 10:51:25
 */
package gui;

import data.Action;
import data.Pose;
import data.Robot;
import data.Sequence;
import data.SequenceAction;
import data.Sound;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;
import java.util.logging.Level;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import managers.PanelManager;
import managers.SessionManager;
import runners.ActionRunner;

/**
 *
 * @author Sven
 */
public class SequencePanel extends javax.swing.JPanel {

    // The current sequence in sequence step table
    private Sequence currentSequence;
    // List model for sequence list on the right
    private DefaultListModel sequenceListModel;
    // Table model for sequence steps
    private SequenceTableModel sequenceTM;
    // Local index for sequences
    private Set<Sequence> sequences;
    // Last selected row in sequence table
    private int lastSelectedRow;
    private Robot robot;

    /**
     * Creates and populates sequence panel
     */
    public SequencePanel(Robot robot) {

        this.robot = robot;
        sequenceTM = new SequenceTableModel(null);
        lastSelectedRow = -1;
        sequences = new HashSet<Sequence>();
        sequenceListModel = new DefaultListModel();

        // Now build the GUI
        initComponents();
        
        updateSequences();

        // Create empty sequence
        setSequence(null);
        
        // Catch mouse clicks in table to turn buttons on/off
        tblSequence.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    updateButtons();
                }
            }
        });
        
        tblSequence.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                updateButtons();
            }
        });

        // Catch mouse clicks in pose list to add on double click
        lstPoses.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    btnAddActionPerformed(null);
                }
            }
        });
        
        // Catch list changed events in pose list to turn add button on/off
        lstPoses.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (lstPoses.getSelectedIndex() != -1) {
                    btnAdd.setEnabled(true);
                } else {
                    btnAdd.setEnabled(false);
                }
            }
        });
        
        // Catch list chanegs in sequence list to adjust buttons and to add sequence to table
        lstSequences.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (lstSequences.getSelectedIndex() != -1) {
                    btnSave.setEnabled(true);
                    btnDelete.setEnabled(true);
                    setSequence((Sequence) lstSequences.getSelectedValue());
                } else {
                    btnSave.setEnabled(false);
                    btnDelete.setEnabled(true);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        pnlButtons = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblSequence = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnSaveAs = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlSequences = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstSequences = new javax.swing.JList();
        pnlPoses = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPoses = new javax.swing.JList();
        pnlButtons2 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSequence = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnPreview = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtSoundfile = new javax.swing.JTextField();
        btnSoundSelect = new javax.swing.JButton();

        setName("Sequences"); // NOI18N

        pnlButtons.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel1.setText("Sequence:");

        lblSequence.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSequence.setText("jLabel2");

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnSaveAs.setText("Save As...");
        btnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlButtonsLayout = new org.jdesktop.layout.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlButtonsLayout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblSequence, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlButtonsLayout.createSequentialGroup()
                        .add(btnSave)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnSaveAs)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblSequence))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSave)
                    .add(btnSaveAs)
                    .add(btnDelete))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlSequences.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lstSequences.setModel(getSequenceListModel());
        lstSequences.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstSequences);

        org.jdesktop.layout.GroupLayout pnlSequencesLayout = new org.jdesktop.layout.GroupLayout(pnlSequences);
        pnlSequences.setLayout(pnlSequencesLayout);
        pnlSequencesLayout.setHorizontalGroup(
            pnlSequencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlSequencesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlSequencesLayout.setVerticalGroup(
            pnlSequencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlSequencesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addContainerGap())
        );

        lstPoses.setModel(PanelManager.getPoseListModel());
        lstPoses.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstPoses);

        pnlButtons2.setLayout(new javax.swing.BoxLayout(pnlButtons2, javax.swing.BoxLayout.PAGE_AXIS));

        btnAdd.setFont(btnAdd.getFont().deriveFont(btnAdd.getFont().getSize()+6f));
        btnAdd.setText(Character.toString('\u25B6'));
        btnAdd.setToolTipText("Add");
        btnAdd.setEnabled(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, btnDown, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), btnAdd, org.jdesktop.beansbinding.BeanProperty.create("preferredSize"));
        bindingGroup.addBinding(binding);

        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        pnlButtons2.add(Box.createVerticalGlue());
        pnlButtons2.add(btnAdd);
        pnlButtons2.add(Box.createVerticalGlue());

        jLabel2.setText("Available Poses:");

        tblSequence.setModel(sequenceTM);
        jScrollPane3.setViewportView(tblSequence);

        jLabel3.setText("Current Sequence Steps:");

        btnUp.setText(Character.toString('\u25B2'));
        btnUp.setToolTipText("Up");
        btnUp.setEnabled(false);
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });
        jPanel2.add(btnUp);

        btnDown.setText(Character.toString('\u25BC'));
        btnDown.setToolTipText("Down");
        btnDown.setEnabled(false);
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });
        jPanel2.add(btnDown);

        btnRemove.setText(Character.toString('\u2573'));
        btnRemove.setToolTipText("Delete");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove);

        btnPreview.setFont(btnPreview.getFont().deriveFont(btnPreview.getFont().getSize()+6f));
        btnPreview.setText(Character.toString('\u25B6'));
        btnPreview.setToolTipText("Run");
        btnPreview.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, btnDown, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), btnPreview, org.jdesktop.beansbinding.BeanProperty.create("preferredSize"));
        bindingGroup.addBinding(binding);

        btnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewActionPerformed(evt);
            }
        });
        jPanel2.add(btnPreview);

        jLabel4.setText("Soundfile:");

        txtSoundfile.setEditable(false);
        txtSoundfile.setText("jTextField1");

        btnSoundSelect.setText("Select ...");
        btnSoundSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSoundSelectActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 455, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel3)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtSoundfile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSoundSelect)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(txtSoundfile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSoundSelect))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout pnlPosesLayout = new org.jdesktop.layout.GroupLayout(pnlPoses);
        pnlPoses.setLayout(pnlPosesLayout);
        pnlPosesLayout.setHorizontalGroup(
            pnlPosesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlPosesLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlPosesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlButtons2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlPosesLayout.setVerticalGroup(
            pnlPosesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(pnlPosesLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlPosesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlPosesLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(pnlButtons2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE))
                    .add(pnlPosesLayout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(pnlPoses, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(pnlSequences, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pnlButtons, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlSequences, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(pnlPoses, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Button Save for sequence on top right was pressed
     *
     * @param evt ActionEvent of click
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        save();
}//GEN-LAST:event_btnSaveActionPerformed

    /**
     * Button SaveAs for sequence on top right was pressed
     *
     * @param evt ActionEvent of click
     */
    private void btnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsActionPerformed
        saveAs();
}//GEN-LAST:event_btnSaveAsActionPerformed

    /**
     * Button Delete for sequence on top right was pressed
     *
     * @param evt ActionEvent of click
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        SessionManager.delete(currentSequence);
        //TODO: Property update events
        //KasparGui.getInstance().sequencesChanged();
        setSequence(null);
        updateSequences();
}//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * Button Add between pose and sequence step table was clicked
     *
     * @param evt ActionEvent of click
     */
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        if (!lstPoses.isSelectionEmpty()) {
            SequenceAction sa = new SequenceAction(currentSequence, (Pose) lstPoses.getSelectedValue(), 0);

            if (tblSequence.getSelectedRowCount() > 0) {
                currentSequence.getSequenceActions().add(tblSequence.getSelectedRow(), sa);
            } else {
                currentSequence.getSequenceActions().add(sa);
            }

            sequenceTM.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * Button Remove for sequence step table was clicked
     *
     * @param evt ActionEvent of click
     */
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed

        if (tblSequence.getSelectedRowCount() > 0) {
            currentSequence.getSequenceActions().remove(tblSequence.getSelectedRow());
            sequenceTM.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * Button Preview for sequence step table was clicked
     *
     * @param evt ActionEvent of click
     */
    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed
        ActionRunner ar = new ActionRunner(this.robot);
        ar.execute(currentSequence);
    }//GEN-LAST:event_btnPreviewActionPerformed

    /**
     * Button Select for sound file was clicked
     *
     * @param evt ActionEvent of click
     */
    private void btnSoundSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSoundSelectActionPerformed
        JFileChooser fcSound = new JFileChooser(SessionManager.getSoundFolder());
        fcSound.setDialogType(JFileChooser.OPEN_DIALOG);
        fcSound.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".wav") || f.getName().endsWith(".au") || f.getName().endsWith(".aiff");
            }

            @Override
            public String getDescription() {
                return "WAV, AU or AIFF file";
            }
        });

        int ret = fcSound.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            Sound s = new Sound(fcSound.getSelectedFile().getName(), fcSound.getSelectedFile().getAbsolutePath());
            s.setSoundFile(fcSound.getSelectedFile().getAbsolutePath());
            SequenceAction sa = new SequenceAction(currentSequence, s, 0);
            currentSequence.getSequenceActions().add(sa);
            txtSoundfile.setText(s.getName());
            sequenceTM.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnSoundSelectActionPerformed

    /**
     * Button Up for sequence step table was clicked
     *
     * @param evt ActionEvent of click
     */
    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        if (tblSequence.getSelectedRowCount() > 0 && tblSequence.getSelectedRow() > 0) {
            int selectedRow = tblSequence.getSelectedRow();
            Collections.swap(currentSequence.getSequenceActions(), selectedRow, selectedRow - 1);
            sequenceTM.fireTableDataChanged();
            tblSequence.getSelectionModel().setSelectionInterval(selectedRow - 1, selectedRow - 1);
            updateButtons();
        }
    }//GEN-LAST:event_btnUpActionPerformed

    /**
     * Button Down for sequence step table was clicked
     *
     * @param evt ActionEvent of click
     */
    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        if (tblSequence.getSelectedRowCount() > 0 && tblSequence.getSelectedRow() < sequenceTM.getRowCount() - 1) {
            int selectedRow = tblSequence.getSelectedRow();
            Collections.swap(currentSequence.getSequenceActions(), selectedRow, selectedRow + 1);
            sequenceTM.fireTableDataChanged();
            tblSequence.getSelectionModel().setSelectionInterval(selectedRow + 1, selectedRow + 1);
            updateButtons();
        }
    }//GEN-LAST:event_btnDownActionPerformed

    /**
     * Save currently opened sequence. If the sequence is new, saveAs() is
     * called first
     */
    private void save() {
        SessionManager.saveAll();

        btnSave.setEnabled(false);
        // Update all sequences and the list
        updateSequences();
        // Inform others that the sequence list has changed
        //TODO: Property change events
        //KasparGui.getInstance().sequencesChanged();
    }

    /**
     * Save currently opened sequences and query user for file name. Makes use
     * of save() to save the sequence after a name was given
     */
    private void saveAs() {

        // Ask user for name
        String name;
        name = (String) JOptionPane.showInputDialog(
                this,
                "Name of Sequence: ",
                "Save Sequence",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                "");

        // Check whether we have a valid name
        // TODO Could check for special characters!
        if (name == null || name.equals("")) {
            GuiLogger.getLogger().log(Level.WARNING, "Invalid name for sequence: {0}!", name);
            return;
        }

        if (currentSequence.getActionId() != null) {
            // Update sequences and call save
            Sequence oldSequence = currentSequence;
            currentSequence = oldSequence.clone();
            SessionManager.reload(oldSequence);
            lblSequence.setText(name);
        }

        currentSequence.setName(name);
        SessionManager.add(currentSequence);
        save();
    }

    /**
     * Gets the list of sequences saved in KasparSequence. It doesn't force a
     * reload of all sequences but KasparSequence should take care of reloading
     * if needed
     */
    private void loadSequences() {

        // Clear and refill HashMap
        sequences.clear();
        sequences.addAll(SessionManager.getCurrentSequences());
    }

    /**
     * Update the sequence list and make sure GUI is up to date. Method clears
     * and refills the sequence list model
     */
    public final void updateSequences() {

        sequenceListModel.clear();
        // make sure sequences are up to date
        loadSequences();
        // Sort sequences
        LinkedList<Sequence> seqs = new LinkedList<Sequence>();
        seqs.addAll(sequences);
        Collections.sort(seqs);

        // add sequences to table
        for (Sequence s : seqs) {
            sequenceListModel.addElement(s);
        }
    }

    /**
     * Make sequence list model available for other panels. List can be updated
     * by calling updateSequences()
     *
     * @return List model containing all sequences
     */
    public DefaultListModel getSequenceListModel() {
        return sequenceListModel;
    }

    /**
     * Make the given sequence the currently used sequence. Enables/disables
     * buttons and shows sequence steps in the step table
     *
     * @param seqName Name of the sequence to be set. If name does not appear in
     * list of current sequences a unnamed sequence is created and used instead
     */
    private void setSequence(Sequence selSeq) {

        if (selSeq != null) {
            currentSequence = selSeq;
            sequenceTM.setSequence(selSeq);
            lblSequence.setText(currentSequence.getName());
            btnDelete.setEnabled(true);
            for (SequenceAction a : currentSequence.getSequenceActions()) {
                if (a.getAction() instanceof Sound) {
                    Sound s = (Sound) a.getAction();
                    txtSoundfile.setText(s.getSoundFile());
                    break;
                }
            }
        } else {
            currentSequence = new Sequence("");
            lblSequence.setText("Unnamed Sequence");
            sequenceTM.setSequence(currentSequence);
            btnDelete.setEnabled(false);
            txtSoundfile.setText("");
        }
        
        btnSave.setEnabled(false);
    }

    /**
     * Function to enable/disable buttons of sequence step table depending on
     * the selected row
     *
     * @param selected Row that is currently selected
     */
    private void updateButtons() {

        int selected = tblSequence.getSelectedRow();

        if (currentSequence.getSequenceActions().isEmpty()) {
            btnSave.setEnabled(false);
            btnSaveAs.setEnabled(false);
            btnPreview.setEnabled(false);
        } else {
            btnSave.setEnabled(!("".equals(currentSequence.getName()) || currentSequence.getName() == null));
            btnSaveAs.setEnabled(true);
            btnPreview.setEnabled(true);
        }btnSaveAs.setEnabled(true);

        btnUp.setEnabled(false);
        btnDown.setEnabled(false);
        btnRemove.setEnabled(false);
        // If nothing is selected
        if (selected == -1) {
            tblSequence.clearSelection();
            lastSelectedRow = selected;
        } // If we didn't select currently active row again
        else if (selected != lastSelectedRow) {
            // If we are first, disable "Up"
            if (selected != 0) {
                btnUp.setEnabled(true);
            }
            // Disable "Down" if we are last
            if (selected != tblSequence.getRowCount() - 1) {
                btnDown.setEnabled(true);
            }
            btnRemove.setEnabled(true);
            lastSelectedRow = selected;
        } // We have selected the already selected row (deselect), clear the selection
        else {
            tblSequence.clearSelection();
            lastSelectedRow = -1;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnPreview;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveAs;
    private javax.swing.JButton btnSoundSelect;
    private javax.swing.JButton btnUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblSequence;
    private javax.swing.JList lstPoses;
    private javax.swing.JList lstSequences;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlButtons2;
    private javax.swing.JPanel pnlPoses;
    private javax.swing.JPanel pnlSequences;
    private javax.swing.JTable tblSequence;
    private javax.swing.JTextField txtSoundfile;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Table model used to create the sequence step table
     */
    private class SequenceTableModel extends DefaultTableModel {

        // sequence to be shown
        Sequence seq;
        String[] columnNames = {"Action", "Delay"};

        /**
         * Constructor. Shows the steps of the given sequence
         *
         * @param sequence
         */
        public SequenceTableModel(Sequence sequence) {
            super();
            seq = sequence;
        }

        /**
         * Change the sequence to given one
         *
         * @param kSeq Sequence to be shown
         */
        public void setSequence(Sequence kSeq) {
            this.seq = kSeq;
            fireTableDataChanged();
        }

        @Override
        public int getRowCount() {
            if (seq != null) {
                return seq.getSequenceActions().size();
            } else {
                return 0;
            }
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return columnNames[columnIndex];
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return Action.class;
            } else if (columnIndex == 1) {
                return Integer.class;
            } else {
                throw new ArrayIndexOutOfBoundsException();
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                return true;
            } else {
                return false;
            }
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            SequenceAction sa = seq.getSequenceActions().get(rowIndex);
            if (columnIndex == 0) {
                if (ActionRunner.isValid(sa.getAction())) {
                    return sa.getAction().getName();
                } else {
                    return "ERR: " + sa.getAction().getName();
                }
            } else if (columnIndex == 1) {
                return sa.getWaitAfter();
            } else {
                throw new ArrayIndexOutOfBoundsException();
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                SequenceAction sa = seq.getSequenceActions().get(rowIndex);
                sa.setWaitAfter((Integer) aValue);
                fireTableCellUpdated(rowIndex, columnIndex);
            }
        }
    }
}
