/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KasparLogger.java
 *
 * Created on 24-Feb-2010, 15:39:21
 */
package gui;

import data.ApplicationLog;
import data.ApplicationLog.LogLevel;
import data.Operator;
import java.util.ArrayList;
import java.util.logging.Formatter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import managers.SessionManager;

/**
 *
 * @author Sven
 */
public class GuiLogger extends javax.swing.JFrame {

    private static final Logger myLogger = Logger.getLogger("Kaspar");
    private LogHandler lh;
    private AppLogHandler alh;
    private boolean running;

    /**
     * Creates new form KasparLogger
     */
    public GuiLogger() {
        running = true;
        alh = new AppLogHandler();

        lh = new LogHandler();
        myLogger.addHandler(lh);
        myLogger.setUseParentHandlers(false);

        initComponents();

        cbxLogLevel.setSelectedIndex(0);
        // Call method to convert to Logger level
        cbxLogLevelActionPerformed(null);

        if (SessionManager.getCurrentInteraction() != null) {
            Operator currentOperator = SessionManager.getCurrentInteraction().getOperator();
            if (currentOperator == null) {
                setLogLevel(LogLevel.All);
            } else {
                setLogLevel(SessionManager.getCurrentInteraction().getOperator().getMinLogLevel());
            }
        } else {
            setLogLevel(LogLevel.All);
        }

        setLogFileLevel(LogLevel.All);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtLogBox = new javax.swing.JTextArea();
        cbxLogLevel = new javax.swing.JComboBox();
        btnOnOff = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kaspar Logger");

        txtLogBox.setColumns(20);
        txtLogBox.setRows(5);
        jScrollPane1.setViewportView(txtLogBox);

        cbxLogLevel.setModel(new DefaultComboBoxModel(LogLevel.values()));
        cbxLogLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLogLevelActionPerformed(evt);
            }
        });

        btnOnOff.setText("Stop");
        btnOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnOffActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cbxLogLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOnOff)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOnOff)
                    .addComponent(btnClear)
                    .addComponent(cbxLogLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnOffActionPerformed

        if (!running) {
            // Turn on logging
            running = true;
            // Set button to "Stop"
            btnOnOff.setText("Stop");
            // Set the log level of the combo box
            cbxLogLevelActionPerformed(null);
        } else {
            // Turn logging off
            running = false;
            btnOnOff.setText("Show");
            lh.setLevel(Level.OFF);
        }

    }//GEN-LAST:event_btnOnOffActionPerformed

    private void cbxLogLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLogLevelActionPerformed
        setLogLevel((LogLevel) cbxLogLevel.getSelectedItem());
    }//GEN-LAST:event_cbxLogLevelActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtLogBox.setText("");
    }//GEN-LAST:event_btnClearActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnOnOff;
    private javax.swing.JComboBox cbxLogLevel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtLogBox;
    // End of variables declaration//GEN-END:variables

    public static Logger getLogger() {
        return myLogger;
    }

    private class AppLogHandler extends Handler {

        private SimpleFormatter simpleFormatter;
        private EvenSimplerFormatter evenSimplerFormatter;

        public AppLogHandler() {
            super();
            this.simpleFormatter = new SimpleFormatter();
            this.evenSimplerFormatter = new EvenSimplerFormatter();
        }

        @Override
        public void publish(LogRecord lr) {
            ApplicationLog log = new ApplicationLog(lr);
        }

        @Override
        public void flush() {
        }

        @Override
        public void close() throws SecurityException {
        }

        public EvenSimplerFormatter getEvenSimplerFormatter() {
            return evenSimplerFormatter;
        }

        public SimpleFormatter getSimpleFormatter() {
            return simpleFormatter;
        }

        public class SimpleFormatter extends Formatter {

            @Override
            public String format(LogRecord lr) {
                return new ApplicationLog(lr).toString();
            }
        }

        public class EvenSimplerFormatter extends Formatter {

            @Override
            public String format(LogRecord lr) {
                return new ApplicationLog(lr).toShortString();
            }
        }
    }

    private class LogHandler extends Handler {

        private ArrayList<LogRecord> records;
        private final int maxLength = 200;

        public LogHandler() {
            super();
            records = new ArrayList<LogRecord>();
        }

        @Override
        public void publish(LogRecord record) {

            //check if the record is loggable
            if (!isLoggable(record) || !running) {
                return;
            }

            records.add(record);
            if (records.size() > maxLength) {
                records.remove(0);
            }
            updateTextBox();
        }

        private void updateTextBox() {

            if (records.size() == maxLength) {

                StringBuilder box = new StringBuilder("");
                // we run out of space, so rewrite text all the time
                for (LogRecord record : records) {
                    try {
                        box.append(getFormatter().format(record));
                    } catch (Exception e) {
                        txtLogBox.append("Could not format last log record! " + e.toString());
                        e.printStackTrace();
                        box.append(record.toString());
                    }
                }

                txtLogBox.setText(box.toString());

            } else {

                try {
                    txtLogBox.append(getFormatter().format(records.get(records.size() - 1)));

                } catch (Exception e) {
                    txtLogBox.append("Could not format last log record! " + e.toString());
                    e.printStackTrace();
                    txtLogBox.append(records.get(records.size() - 1).toString());
                }

                txtLogBox.setCaretPosition(txtLogBox.getText().length());
            }
        }

        @Override
        public void flush() {
        }

        @Override
        public void close() throws SecurityException {
        }
    }

    public final void setLogLevel(LogLevel level) {
        cbxLogLevel.setSelectedItem(level);
        if (level == LogLevel.All) {
            lh.setFormatter(alh.getSimpleFormatter());
        } else {
            lh.setFormatter(alh.getEvenSimplerFormatter());
        }

        lh.setLevel(level.toLevel());
    }

    public final void setLogFileLevel(LogLevel level) {

        if (level != LogLevel.None) {
            AppLogHandler h = new AppLogHandler();
            myLogger.addHandler(h);
        }

        alh.setLevel(level.toLevel());
    }
}
