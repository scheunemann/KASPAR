!function(){define("common/services/ModelBuilder",["require","angular","angularResource"],function(require){var angular=require("angular");require("angularResource");var ModelBuilder=function(){this.basePath="",this.setBasePath=function(path){-1==path.indexOf("/",path.length-1)&&(path+="/"),this.basePath=path},this.transformResponse=function(data,headersGetter){data=angular.fromJson(data);var newResponse=(headersGetter(),data.objects);return newResponse.paging={num_results:data.num_results,page:data.page,total_pages:data.total_pages},newResponse},this.$get=["$resource","$q","$rootScope",function($resource,$q){var root=this,getModel=function(model,params,methods,url){url=void 0===url?root.basePath+model+"/:id":root.basePath+url;var defaultMethods={update:{method:"PUT",isArray:!1},create:{method:"POST"},get:{method:"GET",cache:!0},query:{method:"GET",isArray:!0,transformResponse:root.transformResponse}},defaultParams={id:"@id"};methods=angular.extend(defaultMethods,methods);for(var name in methods)methods[name].hasOwnProperty("url")&&(methods[name].url=root.basePath+methods[name].url);params=angular.extend(defaultParams,params);var resource=$resource(url,params,methods);return resource.prototype.getProperty=function(propName){var key="$__"+propName;if(void 0===this[key]){var subUrl=root.basePath+model+"/"+this.id+"/"+propName;this[key]=$resource(subUrl,{},defaultMethods).query()}return this[key]},resource.prototype.getConcreteClassInstance=function(){if(this.$concreteResolved)return this;if(void 0===this.id||void 0===this.type){if(void 0!==this.$promise)return this;var def=$q.defer();return this.$promise=def.promise,def.resolve(this),this}var concreteModel=getModel(this.type),concreteInstance=concreteModel.get({id:this.id});return concreteInstance.$promise.then(function(res){res.$concreteResolved=!0}),concreteInstance},resource.prototype.$save=function(){return this.id?this.$update():this.$create()},resource.queryBase=resource.query,resource.query=function(params){if(void 0!==params){var q={};q.filters=[];for(var key in params)q.filters.push({name:key,op:null===params[key]?"is_null":"==",val:params[key]});return this.queryBase({q:q})}return this.queryBase()},resource};return{getModel:getModel}}]};return ModelBuilder}),define("common/services/modelServices",["require","angular","angularResource","./ModelBuilder"],function(require){{var angular=require("angular"),angularResource=require("angularResource"),ModelBuilder=require("./ModelBuilder"),moduleName="kasparGUI.common.modelServices",dependancies=[angularResource];angular.module(moduleName,dependancies).provider("modelBuilder",ModelBuilder)}return moduleName}),define("text!default.tpl.html",[],function(){return'<h3 class="text-center">Default start page</h3>\r\n<strong>TODO</strong>\r\n<ul>\r\n	<li><strong> Login screen </strong></li>\r\n	<li><strong> User customisations </strong>\r\n		<ul>\r\n			<li>behaviour overrides</li>\r\n			<li>trigger overrides</li>\r\n			<li>global speed modifier (should this include timings?)</li>\r\n		</ul></li>\r\n	<li><strong> Language/Terminology corrections </strong>\r\n		<ul>\r\n			<li>Need to work with teachers to tune language</li>\r\n		</ul></li>\r\n	<li><strong> Visual cleanup </strong>\r\n		<ul>\r\n			<li>better feedback on save/update</li>\r\n			<li>reset save/update/disabled when changing model</li>\r\n			<li>alignment/sizing</li>\r\n			<li>consistent formatting</li>\r\n		</ul></li>\r\n	<li><strong>Tootips on input screens</strong></li>\r\n	<li><strong> Performance </strong>\r\n		<ul>\r\n			<li>base.(de)serialise may need to be revisited and written\r\n				explicitly for each model</li>\r\n			<li>Rollback doesn\'t appear to work properly for SQL rejected\r\n				data</li>\r\n		</ul></li>\r\n</ul>'}),define("common/i18n/en-gb",["require"],function(){var enGb={"action.label":"Action","action.select.prompt":"--Select Action--","action.test":"Test","action.stop":"Stop","action.import.selectFiles":"Select Files","action.import.upload":"Upload","action.new":"New","action.delete":"Delete","action.type.label":"Type","action.type.select.prompt":"--Select Type--","action.sound.name":"Name","action.sound.selectFile":"Select File","action.sound.upload":"Upload","action.sequence.name":"Name","action.sequence.actions.list.label":"All Behaviours","action.sequence.actions.add":"Add","action.sequence.actions.remove":"Remove","action.sequence.actions.moveUp":"Move Up","action.sequence.actions.moveDown":"Move Down","action.sequence.actions.title":"Sequence Behaviours","action.sequence.help.short":"All selected behaviours will attempt execute in order","action.pose.name":"Name","action.pose.speedModifier":"Speed Modifier","action.pose.speedModifier.short":"Speed","action.pose.minLength":"Minimum Length","action.pose.minLength.short":"Length","action.pose.minLength.units":"seconds","action.pose.joint.name":"Joint Name","action.pose.joint.name.short":"Name","action.pose.joint.select.prompt":"--Select Joint--","action.pose.joint.delete":"Remove","action.pose.joint.position":"Position","action.pose.joint.speed":"Speed","action.group.name":"Name","action.group.actions.list.label":"All Behaviours","action.group.actions.add":"Add","action.group.actions.remove":"Remove","action.group.actions.title":"Group Behaviours","action.group.help.short":"All selected behaviours will attempt to execute simultaneously","common.setting.robot.label":"Attached Robot","common.setting.robot.select.prompt":"--Select Robot--","interaction.operator.label":"Operator","interaction.operator.select.prompt":"--Select Operator--","interaction.user.label":"User","interaction.user.select.prompt":"--Select User--","interaction.start":"Start","interaction.stop":"Stop","interaction.operator.view.buttons.label":"User Buttons","interaction.operator.view.activateBindings":"Activate Bindings","interaction.operator.view.showHotkeys":"Show Hotkeys","operator.label":"Operator","operator.select.prompt":"--Select Operator--","operator.new":"New","operator.delete":"Delete","operator.name":"Name","operator.users":"Common Users","robot.label":"Robot","robot.select.prompt":"--Select Robot--","robot.new":"New","robot.delete":"Delete","robot.view.servoModel.label":"Servo Model Configs","robot.view.servoModel.id":"Servo Model Id","robot.view.servoModel.port":"Port","robot.view.servoModel.portSpeed":"Port Speed","robot.view.servoModel.position.scale":"Position Scale","robot.view.servoModel.position.offset":"Position Offset","robot.view.servoModel.position.min":"Min Position","robot.view.servoModel.position.max":"Max Position","robot.view.servoModel.position.default":"Default Position","robot.view.servoModel.speed.scale":"Speed Scale","robot.view.servoModel.speed.min":"Min Speed","robot.view.servoModel.speed.max":"Max Speed","robot.view.servoModel.speed.default":"Default Speed","robot.view.servoModel.poseable":"Poseable","robot.view.servoModel.otherSettings":"Other","robot.view.servoGroups.label":"Servo Groups","robot.view.servoGroups.servoName":"Servo Name","robot.view.servos.label":"Servos","robot.view.servos.model.id":"Servo Model Id","robot.view.servos.position.scale":"Position Scale","robot.view.servos.position.offset":"Position Offset","robot.view.servos.position.min":"Min Position","robot.view.servos.position.max":"Max Position","robot.view.servos.position.default":"Default Position","robot.view.servos.speed.scale":"Speed Scale","robot.view.servos.speed.min":"Min Speed","robot.view.servos.speed.max":"Max Speed","robot.view.servos.speed.default":"Default Speed","robot.view.servos.poseable":"Poseable","robot.view.servos.otherSettings":"Other","robot.interface.robot":"Attached Robot","robot.interface.robot.short":"Robot","robot.interface.robot.select.prompt":"--Select Robot--","robot.interface.connect":"Connect","robot.interface.disconnect":"Disconnect","robot.name":"Name","robot.model":"Model","robot.model.select.prompt":"--Select Model--","robot.version":"Version","trigger.import.selectFiles":"Select Files","trigger.import.upload":"Upload","trigger.label":"Trigger","trigger.select.prompt":"--Select Trigger--","trigger.new":"New","trigger.delete":"Delete","trigger.type.label":"Type","trigger.type.select.prompt":"--Select Type--","trigger.time.name":"Name","trigger.time.action":"Action","trigger.time.action.select.prompt":"No Action","trigger.time.trigger":"Trigger","trigger.time.trigger.select.prompt":"--Select Trigger--","trigger.time.time":"Time","trigger.time.time.while":"While Active","trigger.time.time.since":"Since Deactivated","trigger.time.time.units":"seconds","trigger.sensor.connect":"Connect","trigger.sensor.disconnect":"Disconnect","trigger.sensor.current":"Current","trigger.sensor.basic.label":"Basic","trigger.sensor.basic.on":"Active","trigger.sensor.basic.off":"Inactive","trigger.sensor.basic.help.short":"As determined by sensor type","trigger.sensor.advanced.label":"Detailed","trigger.sensor.advanced.compare.label":"Active when current value","trigger.sensor.advanced.compare.select.prompt":"--Select Value--","trigger.sensor.name":"Name","trigger.sensor.action":"Action","trigger.sensor.action.select.prompt":"No Action","trigger.sensor.sensor":"Sensor","trigger.sensor.sensor.select.prompt":"--Select Sensor--","trigger.button.hotkey.label":"Keyboard Button","trigger.button.hotkey.delete":"Delete","trigger.button.hotkey.new":"New Keyboard Button","trigger.button.name":"Name","trigger.button.action":"Action","trigger.button.action.select.prompt":"No Action","trigger.compound.name":"Name","trigger.compound.action":"Action","trigger.compound.action.select.prompt":"No Action","user.label":"User","user.select.prompt":"--Select User--","user.new":"New","user.delete":"Delete","user.name":"Name","user.speedModifier":"Movement Speed","user.custom.action.label":"Custom Behaviours","user.custom.action.new":"New","user.custom.action.delete":"Delete","user.custom.action.override":"Action to Override","user.custom.action.redirect":"Override Action","user.custom.trigger.label":"Custom Triggers","user.custom.trigger.new":"New","user.custom.trigger.delete":"Delete","navbar.admin.label":"Admin","navbar.admin.operators":"Operators","navbar.admin.users":"Users","navbar.admin.robots":"Robots","navbar.admin.settings":"Settings","navbar.action.label":"Action","navbar.action.edit":"Create/Edit","navbar.action.test":"Test","navbar.action.import":"Import","navbar.trigger.label":"Trigger","navbar.trigger.edit":"Create/Edit","navbar.trigger.test":"Test","navbar.trigger.import":"Import","navbar.interaction.label":"Interactions","navbar.interaction.view":"View History","navbar.interaction.begin":"Begin New","navbar.interaction.manage":"Manage History"};return enGb}),define("common/i18n/Language",["require","../i18n/en-gb"],function(require){var enGB=require("../i18n/en-gb"),Language=function(){this.language="en-gb",this.setLanguage=function(language){this.language=language},this.getText=function(){return enGB}};return Language}),define("common/i18n/languageServices",["require","angular","./Language"],function(require){{var angular=require("angular"),Language=require("./Language"),moduleName="kasparGUI.common.languageServices",dependancies=[];angular.module(moduleName,dependancies).service("language",Language)}return moduleName}),define("actions/models/Action",["require"],function(){var Action=function(modelBuilder){var resource=modelBuilder.getModel("Action",{},{create:{method:"POST",url:":type",params:{type:"@type"},isArray:!1},update:{method:"PUT",url:":type/:id",params:{type:"@type",id:"@id"},isArray:!1}});return resource};return["modelBuilder",Action]}),define("actions/models/ActionTest",["require"],function(){var ActionTest=function(modelBuilder){var _service=modelBuilder.getModel("ActionTest",{},{},"Action/:id/Test");return _service};return["modelBuilder",ActionTest]}),define("actions/models/ActionType",["require"],function(){var ActionType=function(modelBuilder){var _service=modelBuilder.getModel("ActionType");return _service};return["modelBuilder",ActionType]}),define("actions/models/JointPosition",["require"],function(){var JointPosition=function(modelBuilder){var _service=modelBuilder.getModel("JointPosition");return _service};return["modelBuilder",JointPosition]}),define("actions/models/SequenceOrder",["require"],function(){var SequenceOrder=function(modelBuilder){var _service=modelBuilder.getModel("SequenceOrder");return _service};return["modelBuilder",SequenceOrder]}),define("actions/models",["require","angular","angularResource","./models/Action","./models/ActionTest","./models/ActionType","./models/JointPosition","./models/SequenceOrder"],function(require){{var angular=require("angular"),angularResource=require("angularResource"),Action=require("./models/Action"),ActionTest=require("./models/ActionTest"),ActionType=require("./models/ActionType"),JointPosition=require("./models/JointPosition"),SequenceOrder=require("./models/SequenceOrder"),moduleName="kasparGUI.actions.models",dependancies=[angularResource];angular.module(moduleName,dependancies).factory("Action",Action).factory("ActionTest",ActionTest).factory("ActionType",ActionType).factory("JointPosition",JointPosition).factory("SequenceOrder",SequenceOrder)}return moduleName}),define("common/services/HotkeyFormatter",["require"],function(){var HotkeyFormatter=function(){this.getDisplayFromEvent=function(keyEvent){var code=keyEvent.which||keyEvent.keyCode,modifiers="";keyEvent.altKey&&(modifiers+="alt+"),keyEvent.ctrlKey&&(modifiers+="ctrl+"),keyEvent.shiftKey&&(modifiers+="shift+");var disp=this.getCharDisplay(code);return""!==disp||""!==modifiers?modifiers+disp:""},this.getCharDisplay=function(charCode){var char;return char=8==charCode?"backspace":9==charCode?"":13==charCode?"enter":16==charCode?"":17==charCode?"":18==charCode?"":19==charCode?"":20==charCode?"":27==charCode?"escape":32==charCode?"space":33==charCode?"pageup":34==charCode?"pagedown":35==charCode?"end":36==charCode?"home":37==charCode?"left":38==charCode?"up":39==charCode?"right":40==charCode?"down":45==charCode?"ins":46==charCode?"del":91==charCode?"":92==charCode?"":93==charCode?"":96==charCode?"0":97==charCode?"1":98==charCode?"2":99==charCode?"3":100==charCode?"4":101==charCode?"5":102==charCode?"6":103==charCode?"7":104==charCode?"8":105==charCode?"9":106==charCode?"*":107==charCode?"+":109==charCode?"-":110==charCode?".":111==charCode?"/":112==charCode?"F1":113==charCode?"F2":114==charCode?"F3":115==charCode?"F4":116==charCode?"F5":117==charCode?"F6":118==charCode?"F7":119==charCode?"F8":120==charCode?"F9":121==charCode?"F10":122==charCode?"F11":123==charCode?"F12":144==charCode?"":145==charCode?"":186==charCode?";":187==charCode?"=":188==charCode?",":189==charCode?"-":190==charCode?".":191==charCode?"/":192==charCode?"`":219==charCode?"[":220==charCode?"\\":221==charCode?"]":222==charCode?"'":String.fromCharCode(charCode)}};return HotkeyFormatter}),define("common/services/displayServices",["require","angular","./HotkeyFormatter"],function(require){{var angular=require("angular"),HotkeyFormatter=require("./HotkeyFormatter"),moduleName="kasparGUI.common.displayServices",dependancies=[];angular.module(moduleName,dependancies).service("hotkeyFormatter",HotkeyFormatter)}return moduleName}),define("robots/services/RobotInterface",["require"],function(){var Sensor=function(){return{id:null,name:null,value:null}},Servo=function(){return{id:null,actual:{position:null,poseable:null},poseable:null,position:null,jointName:null}},RobotInterface=function($q,$timeout,$rootScope,RobotInterface){var connected=!1,robotId=null,delayedSave=null,saving=!1,components={servos:{},sensors:{},id:null,timestamp:null},sendChanges=function(newValue,oldValue){if(null!==robotId&&connected){if(saving)return void(delayedSave=newValue);var servos=[];for(var servoName in newValue){var servo=newValue[servoName];(void 0===oldValue||void 0===oldValue[servoName]||servo.position!=oldValue[servoName].position||servo.poseable!=oldValue[servoName].poseable)&&servos.push({id:servo.id,position:servo.position,poseable:servo.poseable,jointName:servoName})}if(servos.length>0){var packet={servos:servos};saving=!0;var save=RobotInterface.save({id:robotId},packet);save.$promise.then(function(){if(saving=!1,null!==delayedSave){var ds=delayedSave;delayedSave=null,sendChanges(ds)}})}else if(null!==delayedSave){var ds=delayedSave;delayedSave=null,sendChanges(ds)}}},updateStatus=function(lastUpdateTime){if(connected){var status=RobotInterface.get(void 0===lastUpdateTime?{id:robotId}:{id:robotId,timestamp:lastUpdateTime});status.$promise.then(processUpdate).then(updateStatus)}},processUpdate=function(dataPackage){for(var servoIndex=0;servoIndex<dataPackage.servos.length;servoIndex++){var servo=dataPackage.servos[servoIndex];void 0===components.servos[servo.jointName]&&(components.servos[servo.jointName]=new Servo,components.servos[servo.jointName].jointName=servo.jointName),components.servos[servo.jointName].id=servo.id,components.servos[servo.jointName].actual.position=servo.position,components.servos[servo.jointName].actual.poseable=servo.poseable}for(var sensorIndex=0;sensorIndex<dataPackage.sensors.length;sensorIndex++){var sensor=dataPackage.sensors[sensorIndex];void 0===components.sensors[sensor.name]&&(components.sensors[sensor.name]=new Sensor,components.sensors[sensor.name].name=sensor.name),components.sensors[sensor.name].id=sensor.id,components.sensors[sensor.name].value=sensor.value}return $rootScope.$$phase||$rootScope.$digest(),dataPackage.timestamp};$rootScope.$watch(function(){return components.servos},sendChanges,!0),this.setRobot=function(robot){if(void 0===robot||null===robot&&null!==robotId)return this.setConnected(!1),void(robotId=null);if(robot.id!=robotId){var connected=this.connected;this.setConnected(!1),robotId=robot.id,this.setConnected(connected)}},this.setConnected=function(connectedState){connected=connectedState,connected&&updateStatus()},this.getSensor=function(sensorName){return void 0===sensorName?null:(void 0===components.sensors[sensorName]&&(components.sensors[sensorName]=new Sensor,components.sensors[sensorName].name=sensorName),components.sensors[sensorName])},this.getServo=function(componentName){return void 0===componentName?null:(void 0===components.servos[componentName]&&(components.servos[componentName]=new Servo,components.servos[componentName].jointName=componentName),components.servos[componentName])}};return["$q","$timeout","$rootScope","RobotInterface",RobotInterface]}),define("robots/services/interfaceServices",["require","angular","./RobotInterface"],function(require){{var angular=require("angular"),RobotInterface=require("./RobotInterface"),moduleName="kasparGUI.robot.interfaceServices",dependancies=[];angular.module(moduleName,dependancies).service("robotInterface",RobotInterface)}return moduleName}),define("common/filters/ExceptFilter",["require"],function(){var ExceptFilter=function(){return function(inputList,objList,property){var ret=[];if(void 0===objList)return inputList;if(property="undefined"!=typeof property?property:"id","[object Array]"!=Object.prototype.toString.call(objList)&&(objList=[objList]),void 0!==inputList)for(var i=0;i<inputList.length;i++){for(var eq=!1,j=0;j<objList.length&&!(eq=""===property?objList[j]==inputList[i]:objList[j][property]==inputList[i][property]);j++);eq||ret.push(inputList[i])}return ret}};return ExceptFilter}),define("common/filters/InterpolateFilter",["require"],function(){var InterpolateFilter=function(version){return function(text){return String(text).replace(/\%VERSION\%/gm,version)}};return["version",InterpolateFilter]}),define("common/filters/IntersectFilter",["require"],function(){var IntersectFilter=function(){return function(inputList,inputProp,objList,objProp){var ret=[];if(void 0===objList)return ret;"[object Array]"!=Object.prototype.toString.call(objList)&&(objList=[objList]);for(var i=0;i<inputList.length;i++)for(var j=0;j<objList.length;j++){var eq=!1;if(eq=""===objProp&&""===inputProp?objList[j]==inputList[i]:""===objProp&&""!==inputProp?objList[j]===inputList[i][inputProp]:""!==objProp&&""===inputProp?objList[j][objProp]==inputList[i]:objList[j][objProp]==inputList[i][inputProp]){ret.push(inputList[i]);break}}return ret}};return IntersectFilter}),define("common/filters",["require","angular","./filters/ExceptFilter","./filters/InterpolateFilter","./filters/IntersectFilter"],function(require){{var angular=require("angular"),ExceptFilter=require("./filters/ExceptFilter"),InterpolateFilter=require("./filters/InterpolateFilter"),IntersectFilter=require("./filters/IntersectFilter"),moduleName="kasparGUI.common.filters",dependancies=[];angular.module(moduleName,dependancies).filter("except",ExceptFilter).filter("interpolate",InterpolateFilter).filter("intersect",IntersectFilter)}return moduleName}),define("common/models/Menu",["require"],function(){var Menu=function(modelBuilder){return modelBuilder.getModel("Menu")};return["modelBuilder",Menu]}),define("common/models/Setting",["require"],function(){var Setting=function(modelBuilder){var _service=modelBuilder.getModel("Setting");return _service};return["modelBuilder",Setting]}),define("common/models",["require","angular","common/services/modelServices","./models/Menu","./models/Setting"],function(require){{var angular=require("angular"),angularResource=require("common/services/modelServices"),Menu=require("./models/Menu"),Setting=require("./models/Setting"),moduleName="kasparGUI.common.models",dependancies=[angularResource];angular.module(moduleName,dependancies).factory("Menu",Menu).factory("Setting",Setting)}return moduleName}),define("robots/models/Robot",["require"],function(){var Robot=function(modelBuilder){var _service=modelBuilder.getModel("Robot");return _service};return["modelBuilder",Robot]}),define("robots/models/RobotInterface",["require"],function(){var RobotInterface=function(modelBuilder){var _service=modelBuilder.getModel("RobotInterface",{},{get:{method:"GET",cache:!1}},"Robot/:id/Interface");return _service};return["modelBuilder",RobotInterface]}),define("robots/models/RobotModel",["require"],function(){var RobotModel=function(modelBuilder){var _service=modelBuilder.getModel("RobotModel");return _service};return["modelBuilder",RobotModel]}),define("robots/models/Sensor",["require"],function(){var Sensor=function(modelBuilder){var resource=modelBuilder.getModel("Sensor");return resource};return["modelBuilder",Sensor]}),define("robots/models/SensorGroup",["require"],function(){var SensorGroup=function(modelBuilder){var _service=modelBuilder.getModel("SensorGroup");return _service};return["modelBuilder",SensorGroup]}),define("robots/models/SensorModel",["require"],function(){var SensorModel=function(modelBuilder){var _service=modelBuilder.getModel("SensorModel");return _service};return["modelBuilder",SensorModel]}),define("robots/models/SensorValueType",["require"],function(){var SensorValueType=function(modelBuilder){var resource=modelBuilder.getModel("SensorValueType");return resource};return["modelBuilder",SensorValueType]}),define("robots/models/Servo",["require"],function(){var Servo=function(modelBuilder){var _service=modelBuilder.getModel("Servo");return _service};return["modelBuilder",Servo]}),define("robots/models/ServoConfig",["require"],function(){var ServoConfig=function(modelBuilder){var _service=modelBuilder.getModel("ServoConfig");return _service};return["modelBuilder",ServoConfig]}),define("robots/models/ServoGroup",["require"],function(){var ServoGroup=function(modelBuilder){var _service=modelBuilder.getModel("ServoGroup");return _service};return["modelBuilder",ServoGroup]}),define("robots/models/ServoInterface",["require"],function(){var ServoInterface=function(modelBuilder){var _service=modelBuilder.getModel("ServoInterface");return _service};return["modelBuilder",ServoInterface]}),define("robots/models/ServoModel",["require"],function(){var ServoModel=function(modelBuilder){var _service=modelBuilder.getModel("ServoModel");return _service};return["modelBuilder",ServoModel]}),define("robots/models",["require","angular","angularResource","./models/Robot","./models/RobotInterface","./models/RobotModel","./models/Sensor","./models/SensorGroup","./models/SensorModel","./models/SensorValueType","./models/Servo","./models/ServoConfig","./models/ServoGroup","./models/ServoInterface","./models/ServoModel"],function(require){{var angular=require("angular"),angularResource=require("angularResource"),Robot=require("./models/Robot"),RobotInterface=require("./models/RobotInterface"),RobotModel=require("./models/RobotModel"),Sensor=require("./models/Sensor"),SensorGroup=require("./models/SensorGroup"),SensorModel=require("./models/SensorModel"),SensorValueType=require("./models/SensorValueType"),Servo=require("./models/Servo"),ServoConfig=require("./models/ServoConfig"),ServoGroup=require("./models/ServoGroup"),ServoInterface=require("./models/ServoInterface"),ServoModel=require("./models/ServoModel"),moduleName="kasparGUI.robots.models",dependancies=[angularResource];angular.module(moduleName,dependancies).factory("Robot",Robot).factory("RobotInterface",RobotInterface).factory("RobotModel",RobotModel).factory("Sensor",Sensor).factory("SensorGroup",SensorGroup).factory("SensorModel",SensorModel).factory("Servo",Servo).factory("ServoConfig",ServoConfig).factory("ServoGroup",ServoGroup).factory("SensorValueType",SensorValueType).factory("ServoInterface",ServoInterface).factory("ServoModel",ServoModel)}return moduleName}),define("text!robots/directives/robotEditor.tpl.html",[],function(){return'<div>\r\n	<form\r\n		novalidate\r\n		name="robotForm"\r\n		model="robot">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'robot.name\']}}</span>\r\n			<input\r\n				type="text"\r\n				name="name"\r\n				class="form-control"\r\n				placeholder="Name"\r\n				saveable\r\n				ng-model="robot.name"\r\n				required>\r\n		</div>\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'robot.model\']}}</span>\r\n			<select\r\n				ng-disabled="robotForm.model.$pristine && robotForm.model.$valid"\r\n				name="model"\r\n				class="selectpicker form-control"\r\n				ng-model="robot.model_id"\r\n				ng-options="model.id as model.name for model in models | orderBy:\'model.name\'"\r\n				saveable\r\n				required>\r\n				<option value="">{{language[\'robot.model.select.prompt\']}}</option>\r\n			</select>\r\n		</div>\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'robot.version\']}}</span>\r\n			<input\r\n				type="text"\r\n				name="version"\r\n				class="form-control"\r\n				placeholder="Version"\r\n				ng-disabled="robotForm.model.$pristine && robotForm.model.$valid"\r\n				saveable\r\n				ng-model="robot.version"\r\n				required>\r\n		</div>\r\n	</form>\r\n	<hr />\r\n	<tabset ng-show="robot != null"> <tab heading="Servo Details">\r\n	<view-robot robot="robot"></view-robot> </tab> <tab\r\n		heading="Servo Calibration"> <calibrate-robot robot="robot"></calibrate-robot>\r\n	</tab></tabset>\r\n</div>'}),define("robots/directives/RobotEditor",["require","angular","robots/models","text!./robotEditor.tpl.html"],function(require){require("angular");require("robots/models");var template=require("text!./robotEditor.tpl.html"),RobotEditor=function(RobotModel,language){return{template:template,restrict:"E",scope:{robot:"="},controller:function($scope){$scope.language=language.getText(),$scope.models=RobotModel.query()}}};return["RobotModel","language",RobotEditor]}),define("text!robots/directives/batteryLevel.tpl.html",[],function(){return'<div class="battery">\r\n	<div class="icon col-lg-1">&nbsp;</div>\r\n	<progressbar\r\n		max="max"\r\n		value="battery.value"\r\n		type="{{type}}"\r\n		class="meter col-lg-11">{{battery.value || \'Unknown\'}}</progressbar>\r\n</div>'}),define("robots/directives/BatteryLevel",["require","angular","robots/services/interfaceServices","text!./batteryLevel.tpl.html"],function(require){require("angular");require("robots/services/interfaceServices");var template=require("text!./batteryLevel.tpl.html"),BatteryLevel=function(robotInterface){return{template:template,restrict:"E",scope:{},controller:function($scope){$scope.battery=robotInterface.getSensor("BATTERY"),$scope.$watch("battery.value",function(value){null===value||0>value?$scope.type="unknown":value>25?$scope.type="success":value>10?$scope.type="warning":value>=0&&($scope.type="danger")})}}};return["robotInterface","$timeout",BatteryLevel]}),define("text!robots/directives/robotInterface.tpl.html",[],function(){return'\r\n<div class="col-lg-12">\r\n	<div class="row">\r\n		<div class="col-lg-12 input-group">\r\n			<span class="input-group-addon inputLabel">\r\n				<span class="hidden-xs">{{language[\'robot.interface.robot\']}}</span>\r\n				<span class="visible-xs">{{language[\'robot.interface.robot.short\']}}</span>\r\n			</span>\r\n			<select\r\n				ng-disabled="connected || configured || !robots"\r\n				class="selectpicker form-control"\r\n				ng-model="robot"\r\n				ng-options="(item.name + \' (\' + item.version + \')\' ) for item in robots | orderBy:\'name\'">\r\n				<option value="">{{language[\'robot.interface.robot.select.prompt\']}}</option>\r\n			</select>\r\n			<span class="input-group-btn" ng-if="showConnect">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-disabled="!robot"\r\n					ng-hide="connected"\r\n					ng-click="setConnected(true)">{{language[\'robot.interface.connect\']}}</button>\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-show="connected"\r\n					ng-click="setConnected(false)">{{language[\'robot.interface.disconnect\']}}</button>\r\n			</span>\r\n		</div>\r\n	</div>\r\n	<!-- 		<div class="btn-group row"> -->\r\n	<!-- 			<button class="btn btn-default" ng-disabled="true" type="button" ng-click="advancedPositioning(selected)">Advanced Positioning</button> -->\r\n	<!-- 			<button class="btn btn-default" ng-disabled="true" type="button" ng-click="setPositioning(selected, true)" ng-hide="selected.poseEnable">Enable Positioning</button> -->\r\n	<!-- 			<button class="btn btn-default" ng-disabled="true" type="button" ng-click="setPositioning(selected, false)" ng-show="selected.poseEnabled">Disable Positioning</button> -->\r\n	<!-- 			<button class="btn btn-default" ng-disabled="true" type="button" ng-click="getCurrentPose(jointPositionsRaw)">Record Current Position</button> -->\r\n	<!-- 		</div> -->\r\n</div>\r\n'}),define("robots/directives/RobotInterface",["require","angular","common/models","robots/models","robots/services/interfaceServices","text!./robotInterface.tpl.html"],function(require){require("angular");require("common/models"),require("robots/models"),require("robots/services/interfaceServices");var template=require("text!./robotInterface.tpl.html"),RobotInterface=function($q,Robot,robotInterface,Setting,language){return{template:template,restrict:"E",scope:{robot:"=",showConnect:"=?"},controller:function($scope){$scope.language=language.getText(),void 0===$scope.showConnect&&($scope.showConnect=!1);var settings=Setting.query({key:"robot"});$scope.robots=Robot.query(),$q.all($scope.robots.$promise,settings.$promise).then(function(){if(settings.length>0)for(var i=0;i<$scope.robots.length;i++)if($scope.robots[i].name==settings[0].value){$scope.robot=$scope.robots[i],$scope.configured=!0;break}}),$scope.$watch("robot",function(robot){robotInterface.setRobot(robot)}),$scope.setConnected=function(state){robotInterface.setConnected(state?state:!1),$scope.connected=state}}}};return["$q","Robot","robotInterface","Setting","language",RobotInterface]}),define("text!robots/directives/calibrateRobot.tpl.html",[],function(){return"<div>Calibrate individual joints or entire robot</div>\r\n<div>\r\n	<strong>TODO</strong>\r\n</div>"}),define("robots/directives/CalibrateRobot",["require","angular","robots/models","text!./calibrateRobot.tpl.html"],function(require){require("angular");
require("robots/models");var template=require("text!./calibrateRobot.tpl.html"),ViewRobot=function(ServoConfig,ServoGroup,Servo,language){return{template:template,restrict:"E",scope:{robot:"="},controller:function($scope){$scope.language=language.getText(),$scope.$watch("robot",function(robot){void 0!==robot&&($scope.servos=robot.servos)})}}};return["ServoConfig","ServoGroup","Servo","language",ViewRobot]}),define("text!robots/directives/viewRobot.tpl.html",[],function(){return'\r\n<accordion close-others="true"> <accordion-group\r\n	is-open="configsOpen"> <accordion-heading>{{language[\'robot.view.servoModel.label\']}}<i\r\n	class="pull-right glyphicon"\r\n	ng-class="{\'glyphicon-chevron-down\': configsOpen, \'glyphicon-chevron-right\': !configsOpen}"></i>\r\n</accordion-heading>\r\n<div\r\n	ng-repeat="item in servoConfigs"\r\n	class="col-lg-6 col-sm-12">\r\n	<strong>{{item.model.name}}</strong>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.id\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.id"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.port\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.port"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.portSpeed\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.portSpeed"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.position.scale\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.positionScale"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.position.offset\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.positionOffset"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.position.min\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.minPosition"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.position.max\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.maxPosition"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.position.default\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.defaultPosition"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.speed.scale\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.speedScale"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.speed.min\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.minSpeed"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.speed.max\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.maxSpeed"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.speed.default\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.defaultSpeed"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.poseable\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model.poseable"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span\r\n		class="input-group"\r\n		ng-if="item.extraData">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoModel.otherSettings\']}}</span>\r\n		<span class="list-group form-control">\r\n			<span\r\n				class="list-group-item"\r\n				ng-repeat="(key, value) in item.extraData">\r\n				<span class="input-group">\r\n					<span class="input-group-addon inputLabel">{{key}}</span>\r\n					<input\r\n						type="text"\r\n						class="form-control"\r\n						placeholder="Not Set"\r\n						ng-model="value"\r\n						ng-disabled="true">\r\n				</span>\r\n			</span>\r\n		</span>\r\n	</span>\r\n</div>\r\n</accordion-group> <accordion-group is-open="groupsOpen"> <accordion-heading>{{language[\'robot.view.servoGroups.label\']}} <i\r\n	class="pull-right glyphicon"\r\n	ng-class="{\'glyphicon-chevron-down\': groupsOpen, \'glyphicon-chevron-right\': !groupsOpen}"></i>\r\n</accordion-heading>\r\n<div\r\n	ng-repeat="item in servoGroups"\r\n	class="col-lg-4 col-md-6 col-sm-12">\r\n	<strong>{{item.name}}</strong>\r\n	<span\r\n		class="input-group"\r\n		ng-repeat="servo in item.servos">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servoGroups.servoName\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="servo.jointName"\r\n			ng-disabled="true">\r\n	</span>\r\n</div>\r\n</accordion-group> <accordion-group is-open="servosOpen"> <accordion-heading>{{language[\'robot.view.servos.label\']}}\r\n<i\r\n	class="pull-right glyphicon"\r\n	ng-class="{\'glyphicon-chevron-down\': servosOpen, \'glyphicon-chevron-right\': !servosOpen}"></i>\r\n</accordion-heading>\r\n<div\r\n	ng-repeat="item in servos"\r\n	class="col-lg-4 col-md-6 col-sm-12">\r\n	<strong>{{item.jointName}}</strong>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.model.id\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Not Set"\r\n			ng-model="item.model_id"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.position.min\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Inherit"\r\n			ng-model="item.minPosition"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.position.max\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Inherit"\r\n			ng-model="item.maxPosition"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.position.default\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Inherit"\r\n			ng-model="item.defaultPosition"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.speed.min\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Inherit"\r\n			ng-model="item.minSpeed"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.speed.max\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Inherit"\r\n			ng-model="item.maxSpeed"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.speed.default\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Inherit"\r\n			ng-model="item.defaultSpeed"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.poseable\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Inherit"\r\n			ng-model="item.poseable"\r\n			ng-disabled="true">\r\n	</span>\r\n	<span\r\n		class="input-group"\r\n		ng-if="item.extraData">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.view.servos.otherSettings\']}}</span>\r\n		<span class="list-group form-control">\r\n			<span\r\n				class="list-group-item"\r\n				ng-repeat="(key, value) in item.extraData">\r\n				<span class="input-group">\r\n					<span class="input-group-addon inputLabel">{{key}}</span>\r\n					<input\r\n						type="text"\r\n						class="form-control"\r\n						placeholder="Not Set"\r\n						ng-model="value"\r\n						ng-disabled="true">\r\n				</span>\r\n			</span>\r\n		</span>\r\n	</span>\r\n</div>\r\n</accordion-group> </accordion>\r\n'}),define("robots/directives/ViewRobot",["require","angular","robots/models","text!./viewRobot.tpl.html"],function(require){require("angular");require("robots/models");var template=require("text!./viewRobot.tpl.html"),ViewRobot=function(ServoConfig,ServoGroup,Servo,language){return{template:template,restrict:"E",scope:{robot:"="},controller:function($scope){$scope.language=language.getText(),$scope.groupsOpen=!1,$scope.configsOpen=!1,$scope.servosOpen=!1,$scope.$watch("robot",function(robot){void 0!==robot&&($scope.servoConfigs=ServoConfig.query({robot_id:robot.id}),$scope.servoGroups=ServoGroup.query({robot_id:robot.id}),$scope.servos=robot.servos)})}}};return["ServoConfig","ServoGroup","Servo","language",ViewRobot]}),define("robots/directives",["require","angular","common/i18n/languageServices","common/services/displayServices","robots/services/interfaceServices","common/filters","common/models","robots/models","./directives/RobotEditor","./directives/BatteryLevel","./directives/RobotInterface","./directives/CalibrateRobot","./directives/ViewRobot"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),displayServices=require("common/services/displayServices"),interfaceServices=require("robots/services/interfaceServices"),filters=require("common/filters"),commonModels=require("common/models"),robotModels=require("robots/models"),RobotEditor=require("./directives/RobotEditor"),BatteryLevel=require("./directives/BatteryLevel"),RobotInterface=require("./directives/RobotInterface"),CalibrateRobot=require("./directives/CalibrateRobot"),ViewRobot=require("./directives/ViewRobot"),moduleName="kasparGUI.robots.directives",dependancies=[displayServices,languageServices,interfaceServices,filters,commonModels,robotModels];angular.module(moduleName,dependancies).directive("robotEditor",RobotEditor).directive("batteryLevel",BatteryLevel).directive("robotInterface",RobotInterface).directive("calibrateRobot",CalibrateRobot).directive("viewRobot",ViewRobot)}return moduleName}),define("text!actions/directives/actionEditor.tpl.html",[],function(){return'<poseaction-editor\r\n	ng-if="action.type==\'PoseAction\'"\r\n	action="action"\r\n	actions="actions"></poseaction-editor>\r\n<groupaction-editor\r\n	ng-if="action.type==\'GroupAction\'"\r\n	action="action"\r\n	actions="actions"></groupaction-editor>\r\n<soundaction-editor\r\n	ng-if="action.type==\'SoundAction\'"\r\n	action="action"\r\n	actions="actions"></soundaction-editor>\r\n<sequenceaction-editor\r\n	ng-if="action.type==\'SequenceAction\'"\r\n	action="action"\r\n	actions="actions"></sequenceaction-editor>\r\n'}),define("actions/directives/ActionEditor",["require","angular","text!./actionEditor.tpl.html"],function(require){var template=(require("angular"),require("text!./actionEditor.tpl.html")),ActionEditor=function($compile,language){return{template:template,restrict:"E",scope:{action:"=",actions:"="},controller:function($scope){$scope.language=language.getText()}}};return["$compile","language",ActionEditor]}),define("text!actions/directives/advancedPoseEditor.tpl.html",[],function(){return'\r\n<div\r\n	class="panel panel-default"\r\n	ng-repeat="group in groups | orderBy:\'name\'">\r\n	<div class="panel-heading">\r\n		<h4 class="panel-title">{{group.name}}</h4>\r\n	</div>\r\n	<div class="panel-body">\r\n		<div\r\n			class="col-lg-4 col-md-6 col-sm-12 col-xs-12 jointEditor"\r\n			ng-repeat="jointPosition in group.rows | orderBy:\'jointName\'">\r\n			<joint-editor\r\n				joint-names="joints"\r\n				joint-position="jointPosition"\r\n				servo-position="getPosition(jointPosition.jointName, servoPositions)"\r\n				servo="getServo(jointPosition.jointName, robot.servos)"></joint-editor>\r\n		</div>\r\n	</div>\r\n</div>'}),define("actions/directives/AdvancedPoseEditor",["require","angular","text!./advancedPoseEditor.tpl.html","actions/models","common/filters","robots/directives"],function(require){var template=(require("angular"),require("text!./advancedPoseEditor.tpl.html"));require("actions/models"),require("common/filters"),require("robots/directives");var AdvancedPoseEditor=function(JointPosition,language){return{template:template,restrict:"E",scope:{pose:"=",robot:"=",connected:"="},controller:function($scope){$scope.language=language.getText(),$scope.$watch("pose.jointPositions",function(jointPositions){$scope.getGroups(jointPositions,$scope.robot)}),$scope.$watch("robot.servos",function(servos){servos=servos||[],$scope.joints=[];for(var i=0;i<servos.length;i++)$scope.joints.push(servos[i].jointName);void 0!==$scope.pose&&$scope.getGroups($scope.pose.jointPositions,$scope.robot)});var processGroup=function(servoGroup,positions){var joints=[],ids=[];for(var servoIndex in servoGroup.servos){var servo=servoGroup.servos[servoIndex],posId=null;for(var posIndex in positions)if(positions[posIndex].jointName==servo.jointName){posId=positions[posIndex].id,joints.push(positions[posIndex]);break}null===posId?joints.push(new JointPosition({position:servo.defaultPosition,speed:servo.defaultSpeed,jointName:servo.jointName,pose_id:$scope.pose.id})):ids.push(posId)}var result=null;return joints.length>0&&(result=[ids,{name:servoGroup.name,rows:joints}]),result};$scope.getGroups=function(jointPositions,robot){jointPositions=jointPositions||[];var posCopy=[];for(var index in jointPositions)posCopy.push(jointPositions[index]);void 0===robot?$scope.groups=[{name:"Pose Joints",rows:posCopy}]:robot.getProperty("servoGroups").$promise.then(function(servoGroups){for(var res=[],servoGroupIndex=0;servoGroupIndex<servoGroups.length;servoGroupIndex++)res.push(processGroup(servoGroups[servoGroupIndex],posCopy));for(var groups=[],resultIndex=0;resultIndex<res.length;resultIndex++)if(null!==res[resultIndex]){groups.push(res[resultIndex][1]);for(var idIdx=0;idIdx<res[resultIndex][0].length;idIdx++)for(var posIdx=0;posIdx<posCopy.length;posIdx++)if(posCopy[posIdx].id==res[resultIndex][0][idIdx]){{posCopy.splice(posIdx,1)}break}}posCopy.length>0&&groups.push({name:"No Group",rows:posCopy}),$scope.groups=groups})},$scope.getServo=function(jointName,servos){if(void 0!==servos){for(var servo=null,i=0;i<servos.length;i++)if(servos[i].jointName==jointName){servo=servos[i];break}return servo}},$scope.getPosition=function(jointName,positions){if(void 0!==positions){for(var position=null,i=0;i<positions.length;i++)if(positions[i].jointName==jointName){position=positions[i];break}return position}}}}};return["JointPosition","language",AdvancedPoseEditor]}),define("text!actions/directives/basicPoseEditor.tpl.html",[],function(){return"\r\n<div>\r\n	<strong>TODO</strong>\r\n	<span>Allow for editing the a pose by manually adjusting the\r\n		robots joints</span>\r\n</div>\r\n"}),define("actions/directives/BasicPoseEditor",["require","angular","text!./basicPoseEditor.tpl.html","actions/models","common/filters","robots/directives"],function(require){var template=(require("angular"),require("text!./basicPoseEditor.tpl.html"));require("actions/models"),require("common/filters"),require("robots/directives");var BasicPoseEditor=function(JointPosition,language){return{template:template,restrict:"E",scope:{pose:"=",robot:"=",connected:"="},controller:function($scope){$scope.language=language.getText()}}};return["JointPosition","language",BasicPoseEditor]}),define("text!actions/directives/groupEditor.tpl.html",[],function(){return'<form\r\n	name="groupForm"\r\n	model="group">\r\n	<div class="col-lg-12 input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'action.group.name\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Group Name"\r\n			required\r\n			saveable\r\n			ng-model="group.name">\r\n	</div>\r\n	<div class="row">\r\n		<div class="col-lg-5">\r\n			<div class="panel panel-default">\r\n				<div class="panel-heading">{{language[\'action.group.actions.list.label\']}}</div>\r\n				<div class="input-group fill">\r\n					<select\r\n						class="selectpicker fill form-control"\r\n						multiple\r\n						ng-multiple="true"\r\n						ng-model="toAdd"\r\n						ng-options="action.name for action in actions | except:group | except:group.actions | orderBy:\'name\'">\r\n					</select>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<div class="col-lg-2">\r\n			<div class="row">&nbsp;</div>\r\n			<div class="row">\r\n				<button\r\n					class="btn btn-default col-lg-12"\r\n					ng-disabled="!toAdd || toAdd.length == 0"\r\n					type="button"\r\n					ng-click="addActions(toAdd);toAdd=[]">{{language[\'action.group.actions.add\']}} &rarr;</button>\r\n			</div>\r\n			<div class="row">\r\n				<button\r\n					class="btn btn-default col-lg-12"\r\n					ng-disabled="!toRemove || toRemove.length == 0"\r\n					type="button"\r\n					ng-click="removeActions(toRemove);toRemove=[]">&larr;\r\n					{{language[\'action.group.actions.remove\']}}</button>\r\n			</div>\r\n		</div>\r\n		<div class="col-lg-5">\r\n			<div class="panel panel-default">\r\n				<div class="panel-heading">{{language[\'action.group.actions.title\']}}</div>\r\n				<div class="input-group fill">\r\n					<select\r\n						class="selectpicker fill form-control"\r\n						multiple\r\n						ng-multiple="true"\r\n						ng-model="toRemove"\r\n						ng-options="action.name for action in group.actions | orderBy:\'name\'">\r\n					</select>\r\n				</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n</form>\r\n<div class="row">\r\n	<div class="col-lg-12">\r\n		<small>{{language[\'action.group.help.short\']}}</small>\r\n	</div>\r\n</div>'}),define("actions/directives/GroupEditor",["require","angular","text!./groupEditor.tpl.html"],function(require){var template=(require("angular"),require("text!./groupEditor.tpl.html")),GroupEditor=function(language){return{template:template,restrict:"E",scope:{group:"=action",actions:"="},controller:function($scope){$scope.language=language.getText(),$scope.addActions=function(actions){void 0===$scope.group.actions&&($scope.group.actions=[]);for(var i=0;i<actions.length;i++)$scope.group.actions.push(actions[i]);$scope.group.$save()},$scope.removeActions=function(actions){for(var i=0;i<actions.length;i++)$scope.group.actions.splice($scope.group.actions.indexOf(actions[i]),1);$scope.group.$save()}}}};return["language",GroupEditor]}),define("text!actions/directives/poseEditor.tpl.html",[],function(){return'<div class="row">\r\n	<form\r\n		name="poseForm"\r\n		model="pose">\r\n		<div class="col-lg-12">\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">{{language[\'action.pose.name\']}}</span>\r\n				<input\r\n					type="text"\r\n					class="form-control"\r\n					placeholder="Pose Name"\r\n					required\r\n					name="name"\r\n					saveable\r\n					ng-model="pose.name">\r\n			</div>\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">\r\n					<span class="hidden-xs">{{language[\'action.pose.speedModifier\']}}</span>\r\n					<span class="visible-xs">{{language[\'action.pose.speedModifier.short\']}}</span>\r\n				</span>\r\n				<div ui-slider\r\n					name="speedModifier"\r\n					saveable\r\n					class="form-control"\r\n					min="1"\r\n					max="300"\r\n					ng-model="pose.speedModifier"\r\n					step="1"> </div>\r\n				<span class="input-group-addon">{{pose.speedModifier}}%</span>\r\n			</div>\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">\r\n					<span class="hidden-xs">{{language[\'action.pose.minLength\']}}</span>\r\n					<span class="visible-xs">{{language[\'action.pose.minLength.short\']}}</span>\r\n				</span>\r\n				<input\r\n					type="number"\r\n					class="form-control"\r\n					min="0"\r\n					placeholder="Minimum Pose Length"\r\n					name="length"\r\n					saveable\r\n					integer\r\n					ng-model="pose.minLength">\r\n				<span class="input-group-addon">{{language[\'action.pose.minLength.units\']}}</span>\r\n			</div>\r\n		</div>\r\n	</form>\r\n</div>\r\n<hr />\r\n<robot-interface\r\n	robot="robot"\r\n	show-connect="true"></robot-interface>\r\n<hr />\r\n<accordion close-others="true"> <accordion-group\r\n	is-open="basicopen"> <accordion-heading>\r\nBasic <i\r\n	class="pull-right glyphicon"\r\n	ng-class="{\'glyphicon-chevron-down\': basicopen, \'glyphicon-chevron-right\': !basicopen}"></i>\r\n</accordion-heading> <basic-pose-editor\r\n	pose="pose"\r\n	robot="robot"></basic-pose-editor></accordion-group> <accordion-group\r\n	is-open="advancedopen"> <accordion-heading>\r\nDetailed <i\r\n	class="pull-right glyphicon"\r\n	ng-class="{\'glyphicon-chevron-down\': advancedopen, \'glyphicon-chevron-right\': !advancedopen}"></i>\r\n</accordion-heading> <advanced-pose-editor\r\n	pose="pose"\r\n	connected="connected"\r\n	robot="robot"></advanced-pose-editor> </accordion-group> </accordion>'}),define("actions/directives/PoseEditor",["require","angular","text!./poseEditor.tpl.html","actions/models","robots/directives"],function(require){var template=(require("angular"),require("text!./poseEditor.tpl.html"));require("actions/models"),require("robots/directives");var PoseEditor=function(JointPosition,RobotInterface,language){return{template:template,restrict:"E",scope:{pose:"=action"},controller:function($scope){$scope.language=language.getText(),$scope.advancedopen=!0,$scope.basicopen=!1,$scope.$watch("pose",function(pose){void 0!==pose&&void 0===pose.speedModifier&&(pose.speedModifier=100)})}}};return["JointPosition","RobotInterface","language",PoseEditor]}),define("text!actions/directives/jointEditor.tpl.html",[],function(){return'<div class="row">\r\n	<div class="col-lg-12">\r\n		<ng-form\r\n			name="jointForm"\r\n			ng-class="{\'has-info\': !jointPosition.id && jointForm.$pristine}"\r\n			model="jointPosition">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">\r\n				<span class="hidden-xs">{{language[\'action.pose.joint.name\']}}</span>\r\n				<span class="visible-xs">{{language[\'action.pose.joint.name.short\']}}</span>\r\n			</span>\r\n			<select\r\n				name="jointname"\r\n				class="selectpicker form-control"\r\n				ng-options="name for name in (jointNames || [jointPosition.jointName]) | orderBy:\'toString()\'"\r\n				ng-model="jointPosition.jointName"\r\n				ng-disabled="jointForm.jointname.$pristine && jointForm.jointname.$valid"\r\n				required\r\n				notEmpty\r\n				saveable>\r\n				<option value="">{{language[\'action.pose.joint.select.prompt\']}}</option>\r\n			</select>\r\n			<span\r\n				class="input-group-btn"\r\n				ng-if="jointPosition.id">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="removeJoint()">{{language[\'action.pose.joint.delete\']}}</button>\r\n			</span>\r\n		</div>\r\n		<div\r\n			class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'action.pose.joint.position\']}}</span>\r\n			<div ui-slider\r\n				name="jointposition"\r\n				saveable\r\n				class="form-control"\r\n				min="{{coalesce(servo.minPosition, servoModel.minPosition, -180)}}"\r\n				max="{{coalesce(servo.maxPosition, servoModel.maxPosition, 180)}}"\r\n				ng-model="jointPosition.position"\r\n				step="1"> </div>\r\n			<span class="input-group-addon">{{jointPosition.position}}&deg;</span>\r\n		</div>\r\n		<div\r\n			class="input-group noselect">\r\n			<span class="input-group-addon inputLabel">{{language[\'action.pose.joint.speed\']}}</span>\r\n			<div ui-slider\r\n				name="jointspeed"\r\n				saveable\r\n				class="form-control"\r\n				ng-model="jointPosition.speed"\r\n				min="{{coalesce(servo.minSpeed, servoModel.minSpeed, 1)}}"\r\n				max="{{coalesce(servo.maxSpeed, servoModel.maxSpeed, 300)}}"\r\n				step="1"> </div>\r\n			<span class="input-group-addon">{{jointPosition.speed}}%</span>\r\n		</div>\r\n		</ng-form>\r\n	</div>\r\n</div>\r\n'}),define("actions/directives/JointEditor",["require","angular","robots/services/interfaceServices","text!./jointEditor.tpl.html"],function(require){require("angular");require("robots/services/interfaceServices");var template=require("text!./jointEditor.tpl.html"),JointEditor=function(robotInterface,JointPosition,ServoModel,language){return{template:template,restrict:"E",scope:{jointNames:"=",jointPosition:"=",servo:"=",servoPositions:"=",connected:"="},controller:function($scope){$scope.language=language.getText();var checkPositions=function(){void 0!==$scope.jointPosition&&((void 0===$scope.jointPosition.position||null===$scope.jointPosition.position)&&($scope.jointPosition.position=void 0!==$scope.servo&&null!==$scope.servo&&void 0!==$scope.servo.defaultPosition&&null!==$scope.servo.defaultPosition?$scope.servo.defaultPosition:void 0!==$scope.servoModel&&null!==$scope.servoModel&&void 0!==$scope.servoModel.defaultPosition&&null!==$scope.servoModel.defaultPosition?$scope.servoModel.defaultPosition:0),(void 0===$scope.jointPosition.speed||null===$scope.jointPosition.speed)&&($scope.jointPosition.speed=void 0!==$scope.servo&&null!==$scope.servo&&void 0!==$scope.servo.defaultSpeed&&null!==$scope.servo.defaultSpeed?$scope.servo.defaultSpeed:void 0!==$scope.servoModel&&null!==$scope.servoModel&&void 0!==$scope.servoModel.defaultPosition&&null!==$scope.servoModel.defaultSpeed?$scope.servoModel.defaultSpeed:100))};$scope.$watch("servo",checkPositions),$scope.$watch("jointPosition",checkPositions),$scope.$watch("servo.jointName",function(jointName){$scope.servoInt=robotInterface.getServo(jointName)}),$scope.removeJoint=function(){var promise;promise=void 0===$scope.jointPosition.$delete?JointPosition.delete({id:$scope.jointPosition.id}):$scope.jointPosition.$delete(),promise.then(function(){delete $scope.jointPosition.id})},$scope.$watch("servo.model_id",function(modelId){void 0!==modelId&&($scope.servoModel=ServoModel.get({id:modelId}))}),$scope.$watch("connected",function(value){value&&$scope.writeToServo()}),$scope.coalesce=function(){for(var i=0;i<arguments.length;i++)if(void 0!==arguments[i]&&null!==arguments[i])return arguments[i];return null},$scope.writeToServo=function(){void 0!==$scope.jointPosition&&void 0!==$scope.servoInt&&($scope.servoInt.speed=$scope.jointPosition.speed,$scope.servoInt.position=$scope.jointPosition.position)},$scope.$watch("jointPosition.position",function(){$scope.writeToServo()})}}};return["robotInterface","JointPosition","ServoModel","language",JointEditor]}),define("text!actions/directives/sequenceEditor.tpl.html",[],function(){return'<form\r\n	name="sequenceForm"\r\n	model="sequence">\r\n	<div class="col-lg-12 input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'action.sequence.name\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Sequence Name"\r\n			required\r\n			saveable\r\n			name="name"\r\n			ng-model="sequence.name">\r\n	</div>\r\n	<div class="row">\r\n		<div class="col-lg-5">\r\n			<div class="panel panel-default">\r\n				<div class="panel-heading">{{language[\'action.sequence.actions.list.label\']}}</div>\r\n				<div class="input-group fill">\r\n					<select\r\n						class="selectpicker fill form-control"\r\n						multiple\r\n						ng-multiple="true"\r\n						ng-model="toAdd"\r\n						ng-options="action.name for action in actions | except:sequence | orderBy:\'name\'">\r\n					</select>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<div class="col-lg-2">\r\n			<div class="row">&nbsp;</div>\r\n			<div class="row">\r\n				<button\r\n					class="btn btn-default col-lg-12"\r\n					ng-disabled="!toAdd || toAdd.length == 0"\r\n					type="button"\r\n					ng-click="addActions(toAdd);toAdd=[]">{{language[\'action.sequence.actions.add\']}} &rarr;</button>\r\n			</div>\r\n			<div class="row">\r\n				<button\r\n					class="btn btn-default col-lg-12"\r\n					ng-disabled="!toRemove || toRemove.length == 0"\r\n					type="button"\r\n					ng-click="removeActions(toRemove);toRemove=[]">&larr;\r\n					{{language[\'action.sequence.actions.remove\']}}</button>\r\n			</div>\r\n			<div class="row">\r\n				<button\r\n					class="btn btn-default col-lg-12"\r\n					ng-disabled="!toRemove || toRemove.length == 0"\r\n					type="button"\r\n					ng-click="moveActions(toRemove, -1);toRemove=[]">&uarr;\r\n					{{language[\'action.sequence.actions.moveUp\']}}</button>\r\n			</div>\r\n			<div class="row">\r\n				<button\r\n					class="btn btn-default col-lg-12"\r\n					ng-disabled="!toRemove || toRemove.length == 0"\r\n					type="button"\r\n					ng-click="moveActions(toRemove, 1);toRemove=[]">&darr;\r\n					{{language[\'action.sequence.actions.moveDown\']}}</button>\r\n			</div>\r\n		</div>\r\n		<div class="col-lg-5">\r\n			<div class="panel panel-default">\r\n				<div class="panel-heading">{{action.sequence.actions.title}}</div>\r\n				<div class="input-group fill">\r\n					<select\r\n						class="selectpicker fill form-control"\r\n						multiple\r\n						ng-multiple="true"\r\n						ng-model="toRemove"\r\n						ng-options="((action.order + 1) + \'. \' + getName(action.action_id)) for action in sequence.ordered_actions | orderBy:\'order\'">\r\n					</select>\r\n				</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n</form>\r\n<div class="row">\r\n	<div class="col-lg-12">\r\n		<small>{{language[\'action.sequence.help.short\']}}</small>\r\n	</div>\r\n</div>\r\n'}),define("actions/directives/SequenceEditor",["require","angular","text!./sequenceEditor.tpl.html","actions/models"],function(require){var template=(require("angular"),require("text!./sequenceEditor.tpl.html"));require("actions/models");var SequenceEditor=function(SequenceOrder,language){return{template:template,restrict:"E",scope:{sequence:"=action",actions:"="},controller:function($scope){$scope.language=language.getText(),$scope.getName=function(actionId){if(void 0!==$scope.actions)for(var i=0;i<$scope.actions.length;i++)if($scope.actions[i].id==actionId)return $scope.actions[i].name;return"Unknown action"},$scope.moveActions=function(oactions,change){if(void 0!==oactions&&oactions.length>0){for(var i=0;i<oactions.length;i++){oactions[i].order+=change,oactions[i].order<0&&(oactions[i].order=0);for(var j=0;j<$scope.sequence.ordered_actions.length;j++){var test=$scope.sequence.ordered_actions[j];if(test!=oactions[i]&&test.order==oactions[i].order){test.order-=change;break}}}$scope.saveAll()}},$scope.saveAll=function(){for(var i=0;i<$scope.sequence.ordered_actions.length;){for(var left=$scope.sequence.ordered_actions[i],next=!1,j=0;j<$scope.sequence.ordered_actions.length;j++){var right=$scope.sequence.ordered_actions[j];left!=right&&(left.order==right.order?right.order+=1:left.order-1==right.order&&(next=!0))
}next||0===left.order?i++:left.order-=1}$scope.sequence.$save()},$scope.addActions=function(actions){void 0===$scope.sequence.ordered_actions&&($scope.sequence.ordered_actions=[]);for(var successFunc=function(result){$scope.sequence.ordered_actions.push(result),$scope.saveAll()},i=0;i<actions.length;i++){var oa=new SequenceOrder;oa.order=$scope.sequence.ordered_actions.length,oa.sequence_id=$scope.sequence.id,oa.action_id=actions[i].id,oa.$save().then(successFunc)}},$scope.removeActions=function(oactions){for(var i=0;i<oactions.length;i++){var action=$scope.sequence.ordered_actions.splice($scope.sequence.ordered_actions.indexOf(oactions[i]),1);action.$delete()}$scope.saveAll()}}}};return["SequenceOrder","language",SequenceEditor]}),define("text!actions/directives/soundEditor.tpl.html",[],function(){return'<div>\r\n	<form\r\n		name="soundForm"\r\n		model="sound">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'action.sound.name\']}}</span>\r\n			<input\r\n				name="name"\r\n				type="text"\r\n				class="form-control"\r\n				placeholder="Sound Name"\r\n				required\r\n				ng-model="sound.name">\r\n		</div>\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'action.sound.selectFile\']}}</span>\r\n			<input\r\n				class="form-control"\r\n				type="file"\r\n				onchange="angular.element(this).scope().setFiles(this)" />\r\n			<span class="input-group-btn">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="uploadFile(file)">{{language[\'action.sound.upload\']}}</button>\r\n			</span>\r\n		</div>\r\n	</form>\r\n	<div>\r\n		<strong>TODO:</strong>\r\n		<ul>\r\n			<li>Show if current sound set</li>\r\n			<li>Play current sound</li>\r\n		</ul>\r\n	</div>\r\n</div>'}),define("actions/directives/SoundEditor",["require","angular","text!./soundEditor.tpl.html"],function(require){var template=(require("angular"),require("text!./soundEditor.tpl.html")),SoundEditor=function(language){return{template:template,restrict:"E",scope:{sound:"=action"},controller:function($scope){$scope.language=language.getText()}}};return["language",SoundEditor]}),define("actions/directives",["require","angular","angularSlider","common/services/displayServices","robots/services/interfaceServices","robots/directives","common/filters","actions/models","./directives/ActionEditor","./directives/AdvancedPoseEditor","./directives/BasicPoseEditor","./directives/GroupEditor","./directives/PoseEditor","./directives/JointEditor","./directives/SequenceEditor","./directives/SoundEditor"],function(require){{var angular=require("angular"),angularSlider=require("angularSlider"),displayServices=require("common/services/displayServices"),interfaceServices=require("robots/services/interfaceServices"),robotDirectives=require("robots/directives"),filters=require("common/filters"),actionModels=require("actions/models"),ActionEditor=require("./directives/ActionEditor"),AdvancedPoseEditor=require("./directives/AdvancedPoseEditor"),BasicPoseEditor=require("./directives/BasicPoseEditor"),GroupEditor=require("./directives/GroupEditor"),PoseEditor=require("./directives/PoseEditor"),JointEditor=require("./directives/JointEditor"),SequenceEditor=require("./directives/SequenceEditor"),SoundEditor=require("./directives/SoundEditor"),moduleName="kasparGUI.actions.directives",dependancies=[displayServices,angularSlider,interfaceServices,filters,actionModels,robotDirectives];angular.module(moduleName,dependancies).directive("actionEditor",ActionEditor).directive("advancedPoseEditor",AdvancedPoseEditor).directive("basicPoseEditor",BasicPoseEditor).directive("groupactionEditor",GroupEditor).directive("poseactionEditor",PoseEditor).directive("sequenceactionEditor",SequenceEditor).directive("soundactionEditor",SoundEditor).directive("jointEditor",JointEditor)}return moduleName}),define("actions/ActionController",["require","angular","actions/models","actions/directives"],function(require){var angular=require("angular");require("actions/models"),require("actions/directives");var ActionController=function($scope,$http,Action,ActionType,language){$scope.language=language.getText(),$scope.actions=Action.query(),$scope.types=ActionType.query(),$scope.$watch("action",function(action){if(void 0!==action){var abstractAction=$scope.action,concreteAction=$scope.action.getConcreteClassInstance();concreteAction.$promise.then(function(){$scope.actions[$scope.actions.indexOf(abstractAction)]=concreteAction,$scope.action=concreteAction})}}),$scope.setFiles=function(element){$scope.$apply(function($scope){$scope.files=element.files})},$scope.newAction=function(){$scope.action=new Action({type:"Action"}),$scope.actions.push($scope.action)},$scope.deleteAction=function(action){$scope.actions.splice($scope.actions.indexOf(action),1),$scope.action=$scope.actions[0]},$scope.uploadSound=function(file){var fd=new FormData;fd.append("data",file);$http.post("/api/SoundAction/upload",fd,{header:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(data){$scope.fileId=data})};var errorFunc=function(status){console.log("Error sending file:"+status)},successFunc=function(data){$scope.newobjs.push(data)};$scope.importFiles=function(files){for(var i=0;i<files.length;i++){var fd=new FormData;fd.append("data",files[i]);{$http.post("/api/Action/Import",fd,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(successFunc).error(errorFunc)}}}};return["$scope","$http","Action","ActionType","language",ActionController]}),define("actions/ActionTestController",["require","angular","actions/models"],function(require){require("angular");require("actions/models");var ActionTestController=function($scope,$http,$q,$timeout,Action,ActionTest,language){$scope.language=language.getText(),$scope.running=!1,$scope.actions=Action.query(),$scope.output="",$scope.startAction=function(action){$scope.output+="Start action "+action.name+"\n",ActionTest.save({id:$scope.action.id}).$promise.then(getOutput())};var getOutput=function(){$scope.output+="TODO: live update of running actions\n"};$scope.stopAction=function(action){$scope.output+="TODO: Stop action "+action.name+"\n"}};return["$scope","$http","$q","$timeout","Action","ActionTest","language",ActionTestController]}),define("actions/controllers",["require","angular","common/i18n/languageServices","actions/models","actions/directives","./ActionController","./ActionTestController"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),actionModels=require("actions/models"),actionDirectives=require("actions/directives"),ActionController=require("./ActionController"),ActionTestController=require("./ActionTestController"),moduleName="kasparGUI.actions",dependancies=[actionModels,actionDirectives,languageServices];angular.module(moduleName,dependancies).controller("actionController",ActionController).controller("actionTestController",ActionTestController)}return moduleName}),define("text!actions/index.tpl.html",[],function(){return"<ui-view />"}),define("text!actions/actionEdit.tpl.html",[],function(){return'<strong>TODO</strong>\r\n<ul>\r\n	<li><strong> Feedback on Saving </strong>\r\n		<ul>\r\n			<li>Sound</li>\r\n			<li>Group</li>\r\n			<li>Sequence</li>\r\n		</ul></li>\r\n</ul>\r\n<div\r\n	ng-cloak\r\n	id="actionsList">\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'action.label\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			ng-model="action"\r\n			ng-disabled="actions.length == 0"\r\n			ng-options="action.name group by action.type for action in actions | orderBy:\'name\'">\r\n			<option value="">{{language[\'action.select.prompt\']}}</option>\r\n		</select>\r\n		<span class="input-group-btn">\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-click="newAction()">{{language[\'action.new\']}}</button>\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-click="deleteAction(action)">{{language[\'action.delete\']}}</button>\r\n		</span>\r\n	</div>\r\n	<hr />\r\n	<div ng-if="action">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'action.type.label\']}}</span>\r\n			<select\r\n				ng-disabled="action.id"\r\n				class="selectpicker form-control"\r\n				ng-model="action.type"\r\n				ng-options="type.name as type.disp for type in types | orderBy:\'type.disp\'">\r\n				<option value="">{{language[\'action.type.select.prompt\']}}</option>\r\n			</select>\r\n		</div>\r\n		{{action.type}}\r\n		<action-editor\r\n			action="action"\r\n			actions="actions"></action-editor>\r\n	</div>\r\n</div>'}),define("text!actions/actionImport.tpl.html",[],function(){return'<div>\r\n	<div class="btn-group">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'action.import.selectFiles\']}}</span>\r\n			<input\r\n				class="form-control"\r\n				type="file"\r\n				multiple="multiple"\r\n				onchange="angular.element(this).scope().setFiles(this)" />\r\n			<span class="input-group-btn">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="importFiles(files)">{{language[\'import.upload\']}}</button>\r\n			</span>\r\n		</div>\r\n	</div>\r\n	<div>\r\n		<div ng-repeat="obj in newobjs">{{obj}}</div>\r\n	</div>\r\n</div>'}),define("text!actions/actionTest.tpl.html",[],function(){return'<div>\r\n	<div class="input-group col-lg-12">\r\n		<span class="input-group-addon inputLabel">{{language[\'action.label\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			ng-model="action"\r\n			ng-options="action.name group by action.type for action in actions | orderBy:\'name\'"\r\n			ng-disabled="actions.length == 0">\r\n			<option value="">{{language[\'action.select.prompt\']}}</option>\r\n		</select>\r\n		<span class="input-group-btn">\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-if="!actionTest.active"\r\n				ng-disabled="!action"\r\n				ng-click="startAction(action)">{{language[\'action.test\']}}</button>\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-if="actionTest.active"\r\n				ng-disabled="!action"\r\n				ng-click="stopAction(action)">{{language[\'action.stop\']}}</button>\r\n		</span>\r\n	</div>\r\n	<div class="col-lg-6"></div>\r\n</div>\r\n<hr />\r\n<div\r\n	class="logWindow"\r\n	ng-show="action != \'\'">\r\n	<div class="col-lg-12 well maxHeight">\r\n		<pre class="scrollable maxHeight">{{output}}</pre>\r\n	</div>\r\n</div>'}),define("categories/action",["require","angular","angularUIRouter","actions/controllers","text!actions/index.tpl.html","text!actions/actionEdit.tpl.html","text!actions/actionImport.tpl.html","text!actions/actionTest.tpl.html"],function(require){var angular=require("angular"),uiRouter=require("angularUIRouter"),actionControllers=require("actions/controllers"),defaultTemplate=require("text!actions/index.tpl.html"),editTemplate=require("text!actions/actionEdit.tpl.html"),importTemplate=require("text!actions/actionImport.tpl.html"),testTemplate=require("text!actions/actionTest.tpl.html"),moduleName="kasparGUI.menu.action",dependancies=[uiRouter,actionControllers],Routes=function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("action",{url:"/action",template:defaultTemplate,"abstract":!0}).state("action.edit",{url:"{id:(?:/[0-9]{1,8})?}/edit",template:editTemplate,controller:"actionController"}).state("action.test",{url:"{id:(?:/[0-9]{1,8})?}/test",template:testTemplate,controller:"actionTestController"}).state("action.import",{url:"/import",template:importTemplate,controller:"actionController"})},module=angular.module(moduleName,dependancies);return module.config(["$stateProvider","$urlRouterProvider",Routes]),moduleName}),define("users/models/CustomAction",["require"],function(){var CustomAction=function(modelBuilder){var _service=modelBuilder.getModel("CustomAction");return _service};return["modelBuilder",CustomAction]}),define("users/models/CustomTrigger",["require"],function(){var CustomTrigger=function(modelBuilder){var _service=modelBuilder.getModel("CustomTrigger");return _service};return["modelBuilder",CustomTrigger]}),define("users/models/User",["require"],function(){var User=function(modelBuilder){var _service=modelBuilder.getModel("User");return _service};return["modelBuilder",User]}),define("users/models/UserAction",["require"],function(){var UserAction=function(modelBuilder){var _service=modelBuilder.getModel("UserAction");return _service};return["modelBuilder",UserAction]}),define("users/models",["require","angular","angularResource","./models/CustomAction","./models/CustomTrigger","./models/User","./models/UserAction"],function(require){{var angular=require("angular"),angularResource=require("angularResource"),CustomAction=require("./models/CustomAction"),CustomTrigger=require("./models/CustomTrigger"),User=require("./models/User"),UserAction=require("./models/UserAction"),moduleName="kasparGUI.users.models",dependancies=[angularResource];angular.module(moduleName,dependancies).factory("CustomAction",CustomAction).factory("CustomTrigger",CustomTrigger).factory("User",User).factory("UserAction",UserAction)}return moduleName}),define("operators/models/Operator",["require"],function(){var Operator=function(modelBuilder){var _service=modelBuilder.getModel("Operator");return _service};return["modelBuilder",Operator]}),define("operators/models",["require","angular","angularResource","./models/Operator"],function(require){{var angular=require("angular"),angularResource=require("angularResource"),Operator=require("./models/Operator"),moduleName="kasparGUI.operators.models",dependancies=[angularResource];angular.module(moduleName,dependancies).factory("Operator",Operator)}return moduleName}),define("operators/OperatorController",["require","angular","users/models","operators/models"],function(require){require("angular");require("users/models"),require("operators/models");var OperatorController=function($scope,Operator,User,language){$scope.language=language.getText(),$scope.operators=Operator.query(function(operators){$scope.selectedOperator=operators[0]}),$scope.usersSaved=!1,$scope.users=User.query(),$scope.$watch("operatorsForm.$pristine",function(value){value||($scope.usersSaved=!1)}),$scope.saveOperator=function(){$scope.formCtrl.$valid&&$scope.selectedOperator.$fromServer&&$scope.selectedOperator.$save(function(){$scope.usersSaved=!0,$scope.operatorsForm.$setPristine()})},$scope.newOperator=function(){var newOp=new Operator({fullname:"",name:"",users:[]});$scope.selectedOperator=newOp,$scope.operators.push(newOp)},$scope.deleteOperator=function(operator){operator.$delete(),$scope.operators.splice($scope.operators.indexOf(operator),1),$scope.selectedOperator=$scope.operators[0]},$scope.toggleOperatorUser=function(operator,user){if(void 0!==operator&&void 0!==operator.users){for(var found=!1,i=0;i<operator.users.length;i++)if(operator.users[i].id==user.id){operator.users.splice(i,1),found=!0;break}found||operator.users.push(user),$scope.saveOperator()}}};return["$scope","Operator","User","language",OperatorController]}),define("operators/controllers",["require","angular","common/i18n/languageServices","users/models","operators/models","./OperatorController"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),userModels=require("users/models"),operatorModels=require("operators/models"),OperatorController=require("./OperatorController"),moduleName="kasparGUI.operators.controllers",dependancies=[userModels,languageServices,operatorModels];angular.module(moduleName,dependancies).controller("operatorController",OperatorController)}return moduleName}),define("text!operators/index.tpl.html",[],function(){return'<div>\r\n	<div id="operatorsList">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'operator.label\']}}</span>\r\n			<select\r\n				class="selectpicker form-control"\r\n				ng-model="selectedOperator"\r\n				ng-options="operator.fullname for operator in operators | orderBy:\'fullname\'">\r\n				<option value="">{{language[\'operator.select.prompt\']}}</option>\r\n			</select>\r\n			<span class="input-group-btn">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="newOperator()">{{language[\'operator.new\']}}</button>\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="deleteOperator(selectedOperator)">{{language[\'operator.delete\']}}</button>\r\n			</span>\r\n		</div>\r\n	</div>\r\n	<form\r\n		ng-show="selectedOperator"\r\n		name="operatorsForm"\r\n		model="selectedOperator">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'operator.name\']}}</span>\r\n			<input\r\n				type="text"\r\n				class="form-control"\r\n				placeholder="Full Name"\r\n				saveable\r\n				required\r\n				name="fullname"\r\n				ng-model="selectedOperator.fullname">\r\n		</div>\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'operator.users\']}}</span>\r\n			<div\r\n				class="list-group form-control listForm"\r\n				ng-blur="saveOperator()"\r\n				ng-class="{ \'has-success\': usersSaved, \'has-warning\': operatorsForm.$dirty && !userSaved }">\r\n				<span\r\n					class="list-group-item"\r\n					ng-repeat="user in users">\r\n					<span class="input-group">\r\n						<span class="input-group-addon">\r\n							<input\r\n								type="checkbox"\r\n								ng-disabled="!selectedOperator"\r\n								ng-checked="(selectedOperator.users | filter:{id:user.id}:true).length == 1"\r\n								ng-click="toggleOperatorUser(selectedOperator, user)">\r\n						</span>\r\n						<input\r\n							type="text"\r\n							class="form-control"\r\n							ng-click="toggleOperatorUser(selectedOperator, user)"\r\n							value="{{user.fullname}}"\r\n							ng-disabled="true">\r\n					</span>\r\n				</span>\r\n			</div>\r\n		</div>\r\n	</form>\r\n</div>\r\n<div ui-view></div>'}),define("triggers/models/ButtonHotkey",["require"],function(){var ButtonHotkey=function(modelBuilder){var _service=modelBuilder.getModel("ButtonHotkey");return _service};return["modelBuilder",ButtonHotkey]}),define("triggers/models/Trigger",["require"],function(){var Trigger=function($rootScope,modelBuilder){var resource=modelBuilder.getModel("Trigger",{},{create:{method:"POST",url:":type",params:{type:"@type"},isArray:!1},update:{method:"PUT",url:":type/:id",params:{type:"@type",id:"@id"},isArray:!1}});return resource};return["$rootScope","modelBuilder",Trigger]}),define("triggers/models/ButtonTrigger",["require"],function(){var ButtonTrigger=function($rootScope,modelBuilder){var resource=modelBuilder.getModel("ButtonTrigger");return resource};return["$rootScope","modelBuilder",ButtonTrigger]}),define("triggers/models/TriggerType",["require"],function(){var TriggerType=function(modelBuilder){var _service=modelBuilder.getModel("TriggerType");return _service};return["modelBuilder",TriggerType]}),define("triggers/models",["require","angular","angularResource","./models/ButtonHotkey","./models/Trigger","./models/ButtonTrigger","./models/TriggerType"],function(require){{var angular=require("angular"),angularResource=require("angularResource"),ButtonHotkey=require("./models/ButtonHotkey"),Trigger=require("./models/Trigger"),ButtonTrigger=require("./models/ButtonTrigger"),TriggerType=require("./models/TriggerType"),moduleName="kasparGUI.triggers.models",dependancies=[angularResource];angular.module(moduleName,dependancies).factory("ButtonHotkey",ButtonHotkey).factory("Trigger",Trigger).factory("ButtonTrigger",ButtonTrigger).factory("TriggerType",TriggerType)}return moduleName}),define("users/UserController",["require","angular","actions/models","triggers/models","users/models"],function(require){require("angular");require("actions/models"),require("triggers/models"),require("users/models");var UserController=function($scope,$filter,User,CustomAction,CustomTrigger,Action,Trigger,language){$scope.language=language.getText(),$scope.users=User.query(),$scope.$watch("selectedUser",function(user){void 0!==user&&void 0===user.speedmodifier&&(user.speedmodifier=100)})};return["$scope","$filter","User","CustomAction","CustomTrigger","Action","Trigger","language",UserController]}),define("users/controllers",["require","angular","common/i18n/languageServices","actions/models","triggers/models","users/models","./UserController"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),actionModels=require("actions/models"),triggerModels=require("triggers/models"),userModels=require("users/models"),UserController=require("./UserController"),moduleName="kasparGUI.users.controllers",dependancies=[actionModels,languageServices,triggerModels,userModels];angular.module(moduleName,dependancies).controller("userController",UserController)}return moduleName}),define("text!users/index.tpl.html",[],function(){return'<div>\r\n	<div id="userList">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'user.label\']}}</span>\r\n			<select\r\n				class="selectpicker form-control"\r\n				ng-model="selectedUser"\r\n				ng-options="user.fullname for user in users | orderBy:\'fullname\'">\r\n				<option value="">{{language[\'user.select.prompt\']}}</option>\r\n			</select>\r\n			<span class="input-group-btn">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="newObj(User, users)">{{language[\'user.new\']}}</button>\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="deleteObj(item, users)">{{language[\'user.delete\']}}</button>\r\n			</span>\r\n		</div>\r\n	</div>\r\n	<form\r\n		ng-show="selectedUser"\r\n		name="userForm"\r\n		model="selectedUser">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'user.name\']}}</span>\r\n			<input\r\n				type="text"\r\n				class="form-control"\r\n				placeholder="Full Name"\r\n				name="fullname"\r\n				required\r\n				ng-model="selectedUser.fullname"\r\n				saveable>\r\n		</div>\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'user.custom.action.label\']}}</span>\r\n			<select\r\n				class="selectpicker form-control"\r\n				ng-model="selectedAction"\r\n				ng-options="action.name for action in selectedUser.actions | orderBy:\'name\'">\r\n			</select>\r\n			<span class="input-group-btn">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-disabled="true"\r\n					ng-click="newAction()">{{language[\'user.custom.action.new\']}}</button>\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-disabled="true"\r\n					ng-click="deleteAction(selectedAction)">{{language[\'user.custom.action.delete\']}}</button>\r\n			</span>\r\n		</div>\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'user.custom.trigger.label\']}}</span>\r\n			<select\r\n				class="selectpicker form-control"\r\n				ng-model="selectedTrigger"\r\n				ng-options="trigger.name for trigger in selectedUser.triggers | orderBy:\'name\'">\r\n			</select>\r\n			<span class="input-group-btn">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="newTrigger()"\r\n					ng-disabled="true">{{language[\'user.custom.trigger.new\']}}</button>\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-disabled="true"\r\n					ng-click="deleteTrigger(selectedTrigger)">{{language[\'user.custom.trigger.delete\']}}</button>\r\n			</span>\r\n		</div>\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'user.speedModifier\']}}</span>\r\n			<div ui-slider\r\n				name="speed"\r\n				saveable\r\n				class="form-control"\r\n				min="1"\r\n				max="300"\r\n				ng-disabled="true"\r\n				ng-model="selectedUser.speedmodifier"\r\n				step="1"> </div>\r\n			<span class="input-group-addon">{{selectedUser.speedmodifier}}%</span>\r\n		</div>\r\n	</form>\r\n</div>\r\n<div ui-view></div>'}),define("robots/RobotController",["require","angular","robots/models"],function(require){require("angular");require("robots/models");var RobotController=function($scope,Robot,language){$scope.language=language.getText(),$scope.robots=Robot.query(),$scope.connected=!1,$scope.connect=function(){$scope.connected=!0},$scope.disconnect=function(){$scope.connected=!1}};return["$scope","Robot","language",RobotController]}),define("robots/controllers",["require","angular","common/i18n/languageServices","robots/models","./RobotController"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),robotModels=require("robots/models"),RobotController=require("./RobotController"),moduleName="kasparGUI.robots.controllers",dependancies=[robotModels,languageServices];angular.module(moduleName,dependancies).controller("robotController",RobotController)}return moduleName}),define("text!robots/index.tpl.html",[],function(){return'<div\r\n	ng-cloak>\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'robot.label\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			ng-model="selected"\r\n			ng-options="(item.name + \' (\' + item.model.name + \': \' + item.version + \')\' ) for item in robots | orderBy:\'name\'">\r\n			<option value="">{{language[\'robot.select.prompt\']}}</option>\r\n		</select>\r\n		<span class="input-group-btn">\r\n			<button\r\n				class="btn btn-default"\r\n				ng-disabled="true"\r\n				type="button"\r\n				ng-click="newObj()">{{language[\'robot.new\']}}</button>\r\n			<button\r\n				class="btn btn-default"\r\n				ng-disabled="true"\r\n				type="button"\r\n				ng-click="deleteObj(selected)">{{language[\'robot.delete\']}}</button>\r\n		</span>\r\n	</div>\r\n	<hr />\r\n	<robot-editor robot="selected" ng-if="selected"></robot-editor>\r\n</div>'}),define("common/CommonController",["require","angular"],function(require){var CommonController=(require("angular"),function($scope){$scope.version="3.0 Alpha 10"});return["$scope","$rootScope",CommonController]}),define("common/SettingsController",["require","angular","common/models","robots/models"],function(require){require("angular");require("common/models"),require("robots/models");var SettingsController=function($q,$scope,Setting,Robot,language){$scope.language=language.getText(),$scope.robots=Robot.query(),$scope.settings=Setting.query(),$scope.settings.$promise.then(function(settings){for(var i=0;i<settings.length;i++)if("robot"==settings[i].key){$scope.robotSetting=settings[i];break}void 0===$scope.robotSetting&&($scope.robotSetting=new Setting({key:"robot",value:""}))}),$scope.$watch("robotSetting.value",function(newValue){void 0!==newValue&&$scope.robotSetting.$save()})};return["$q","$scope","Setting","Robot","language",SettingsController]}),define("common/controllers",["require","angular","common/i18n/languageServices","angularUIRouter","common/models","robots/models","./CommonController","./SettingsController"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),uiRouter=require("angularUIRouter"),commonModels=require("common/models"),robotModels=require("robots/models"),CommonController=require("./CommonController"),SettingsController=require("./SettingsController"),moduleName="kasparGUI.common.controllers",dependancies=[uiRouter,languageServices,commonModels,robotModels];angular.module(moduleName,dependancies).controller("commonController",CommonController).controller("settingsController",SettingsController)}return moduleName}),define("text!common/settings.tpl.html",[],function(){return"<div\r\n	ng-cloak>\r\n	<div class=\"input-group\">\r\n		<span class=\"input-group-addon inputLabel\">{{language['common.setting.robot.label']}}</span>\r\n		<select\r\n			class=\"selectpicker form-control\"\r\n			ng-model=\"robotSetting.value\"\r\n			ng-options=\"robot.name as (robot.name + ' (' + robot.model.name + ': ' + robot.version + ')' ) for robot in robots | orderBy:'name'\">\r\n			<option value=\"\">{{language['common.setting.robot.select.prompt']}}</option>\r\n		</select>\r\n	</div>\r\n</div>"}),define("categories/admin",["require","angular","angularUIRouter","operators/controllers","text!operators/index.tpl.html","users/controllers","text!users/index.tpl.html","robots/controllers","text!robots/index.tpl.html","common/controllers","text!common/settings.tpl.html"],function(require){var angular=require("angular"),uiRouter=require("angularUIRouter"),operatorControllers=require("operators/controllers"),operatorTemplate=require("text!operators/index.tpl.html"),userControllers=require("users/controllers"),userTemplate=require("text!users/index.tpl.html"),robotControllers=require("robots/controllers"),robotTemplate=require("text!robots/index.tpl.html"),settingsControllers=require("common/controllers"),settingsTemplate=require("text!common/settings.tpl.html"),moduleName="kasparGUI.menu.admin",dependancies=[uiRouter,operatorControllers,userControllers,robotControllers,settingsControllers],Routes=function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("admin",{url:"/admin",template:"<ui-view/>","abstract":!0}).state("admin.operator",{url:"/operator{id:(?:/[0-9]{1,8})?}",template:operatorTemplate,controller:"operatorController"}).state("admin.user",{url:"/user{id:(?:/[0-9]{1,8})?}",template:userTemplate,controller:"userController"}).state("admin.robot",{url:"/robot{id:(?:/[0-9]{1,8})?}",template:robotTemplate,controller:"robotController"}).state("admin.setting",{url:"/setting",template:settingsTemplate,controller:"settingsController"})},module=angular.module(moduleName,dependancies);return module.config(["$stateProvider","$urlRouterProvider",Routes]),moduleName}),define("interactions/models/Interaction",["require"],function(){var Interaction=function(modelBuilder){var _service=modelBuilder.getModel("Interaction",{},{get:{method:"GET",cache:!1}});return _service};return["modelBuilder",Interaction]}),define("interactions/models/InteractionLog",["require"],function(){var Interaction=function(modelBuilder){var _service=modelBuilder.getModel("InteractionLog",{},{get:{method:"GET",cache:!1}},"Interaction/:interactionId/Log/:id");return _service};return["modelBuilder",Interaction]}),define("interactions/models",["require","angular","angularResource","./models/Interaction","./models/InteractionLog"],function(require){{var angular=require("angular"),angularResource=require("angularResource"),Interaction=require("./models/Interaction"),InteractionLog=require("./models/InteractionLog"),moduleName="kasparGUI.interactions.models",dependancies=[angularResource];angular.module(moduleName,dependancies).factory("Interaction",Interaction).factory("InteractionLog",InteractionLog)}return moduleName}),define("interactions/InteractionController",["require","angular","operators/models","users/models","triggers/models","interactions/models"],function(require){require("angular");require("operators/models"),require("users/models"),require("triggers/models"),require("interactions/models");var InteractionController=function($q,$scope,Operator,User,Interaction,ButtonTrigger,language){$scope.language=language.getText(),$scope.operators=Operator.query(),$scope.users=User.query(),$scope.interaction=null,$scope.keyBind=!0,$scope.showHotKeys=!0;var activeInteractions=Interaction.query({endTime:null});activeInteractions.$promise.then(function(result){void 0!==result&&result.length>0&&($scope.interaction=result[0],$scope.operator_id=$scope.interaction.operator_id,$scope.user_id=$scope.interaction.user_id)}),$scope.buttons=ButtonTrigger.query(),$scope.start=function(){$scope.interaction=new Interaction({startTime:new Date,user_id:$scope.user_id,robot_id:$scope.robot.id,operator_id:$scope.operator_id}),$scope.interaction.$save()
},$scope.stop=function(){$scope.interaction.endTime=new Date,$scope.interaction.$save().then(function(){$scope.interaction=null})},$scope.getCategory=function(user,userList){if(void 0!==userList&&void 0!==user){for(var i=0;i<userList.length;i++)if(userList[i].id==user.id)return"Common";return"All"}}};return["$q","$scope","Operator","User","Interaction","ButtonTrigger","language",InteractionController]}),define("text!interactions/directives/actionButton.tpl.html",[],function(){return'<div ng-class="{\'input-group\': showHotKeys && keyDisplay }" class="actionButton">\r\n	<span ng-class="{\'input-group-btn\': showHotKeys && keyDisplay }" class="button">\r\n		<button\r\n			class="btn btn-default"\r\n			ng-class="{active: active}"\r\n			type="button"\r\n			ng-click="callButton(button.id)">{{button.name}}</button>\r\n	</span>\r\n	<span\r\n		class="form-control hotkey"\r\n		ng-show="showHotKeys && keyDisplay"\r\n		ng-disabled="true">{{keyDisplay}}</span>\r\n</div>\r\n'}),define("interactions/directives/ActionButton",["require","angular","common/services/displayServices","actions/models","mousetrap","text!./actionButton.tpl.html"],function(require){require("angular");require("common/services/displayServices"),require("actions/models");var Mousetrap=require("mousetrap"),template=require("text!./actionButton.tpl.html"),ActionButton=function($q,$timeout,InteractionLog,hotkeyFormatter,language){return{template:template,restrict:"E",scope:{button:"=",interaction:"=",showHotKeys:"=",keyBind:"="},link:function(){},controller:function($scope){$scope.language=language.getText(),$scope.active=!1;var keyBinds=null;$scope.$watch("button",function(newValue){if(void 0!==newValue){for(var kb=[],i=0;i<$scope.button.hotKeys.length;i++)kb.push($scope.button.hotKeys[i].keyString);$scope.keyDisplay=kb.join(" | "),null!==keyBinds&&Mousetrap.unbind(keyBinds),keyBinds=kb,Mousetrap.bind(keyBinds,function(){return $scope.active=!0,$timeout(function(){$scope.active=!1},2e3),$scope.keyBind?($scope.callButton($scope.button.id),!1):void 0})}}),$scope.callButton=function(buttonId){InteractionLog.save({interactionId:$scope.interaction.id},{button_id:buttonId,interaction_id:$scope.interaction.id})}}}};return["$q","$timeout","InteractionLog","hotkeyFormatter","language",ActionButton]}),define("text!interactions/directives/actionButtons.tpl.html",[],function(){return'<div class="row">\r\n	<div\r\n		class="col-lg-3 col-md-6 col-sm-12 col-xs-12"\r\n		ng-repeat="button in buttons | orderBy:\'name\'">\r\n		<action-button\r\n			button="button"\r\n			interaction="interaction"\r\n			user="user"\r\n			show-hot-keys="showHotKeys"\r\n			key-bind="keyBind" />\r\n	</div>\r\n</div>'}),define("interactions/directives/ActionButtons",["require","angular","common/services/displayServices","actions/models","text!./actionButtons.tpl.html"],function(require){require("angular");require("common/services/displayServices"),require("actions/models");var template=require("text!./actionButtons.tpl.html"),ActionButtons=function($q,UserAction,hotkeyFormatter,language){return{template:template,restrict:"E",scope:{buttons:"=",user:"=",interaction:"=",showHotKeys:"=",keyBind:"="},link:function(){},controller:function($scope){$scope.language=language.getText()}}};return["$q","UserAction","hotkeyFormatter","language",ActionButtons]}),define("text!interactions/directives/operatorInteraction.tpl.html",[],function(){return'<div>\r\n	<strong>TODO</strong>\r\n	<ul>\r\n		<li><strong>Feedback on keypress</strong></li>\r\n		<li><strong>Log window with ???</strong></li>\r\n		<li><strong>Images from webcam(s)?</strong></li>\r\n	</ul>\r\n	<accordion close-others="true"> <accordion-group\r\n		is-open="isopen"> <accordion-heading>{{language[\'interaction.operator.view.buttons.label\']}}<i\r\n		class="pull-right glyphicon"\r\n		ng-class="{\'glyphicon-chevron-down\': isopen, \'glyphicon-chevron-right\': !isopen}"></i>\r\n	</accordion-heading>\r\n	<div class="btn-group">\r\n		<button\r\n			type="button"\r\n			class="btn btn-primary check"\r\n			ng-model="keyBind"\r\n			ng-click="setBinding(keyBind)"\r\n			btn-checkbox>{{language[\'interaction.operator.view.activateBindings\']}}</button>\r\n		<button\r\n			type="button"\r\n			class="btn btn-primary check"\r\n			ng-model="showHotKeys"\r\n			btn-checkbox>{{language[\'interaction.operator.view.showHotkeys\']}}</button>\r\n	</div>\r\n	<hr />\r\n	<action-buttons\r\n		interaction="interaction"\r\n		buttons="buttons"\r\n		show-hot-keys="showHotKeys"\r\n		user="user"\r\n		key-bind="keyBind" /></accordion-group> </accordion>\r\n</div>'}),define("interactions/directives/OperatorInteraction",["require","angular","text!./operatorInteraction.tpl.html","mousetrap"],function(require){var template=(require("angular"),require("text!./operatorInteraction.tpl.html")),Mousetrap=require("mousetrap"),OperatorInteraction=function(language){return{template:template,restrict:"E",scope:{operator:"=",user:"=",interaction:"=",buttons:"=",showHotKeys:"=",keyBind:"="},link:function(){},controller:function($scope){$scope.language=language.getText(),$scope.isopen=!0,$scope.setBinding=function(value){value?Mousetrap.pause():Mousetrap.unpause()}}}};return["language",OperatorInteraction]}),define("text!interactions/directives/userInteraction.tpl.html",[],function(){return'<div>\r\n	<strong>TODO</strong>\r\n	<ul>\r\n		<li><strong> FullScreen/No Menus </strong></li>\r\n		<li><strong> Other ?? </strong></li>\r\n	</ul>\r\n<!-- 	<action-buttons -->\r\n<!-- 		interaction="interaction" -->\r\n<!-- 		buttons="buttons" -->\r\n<!-- 		show-hot-keys="showHotKeys" -->\r\n<!-- 		user="user" -->\r\n<!-- 		key-bind="keyBind" /> -->\r\n</div>\r\n'}),define("interactions/directives/UserInteraction",["require","angular","text!./userInteraction.tpl.html"],function(require){var template=(require("angular"),require("text!./userInteraction.tpl.html")),UserInteraction=function(language){return{template:template,restrict:"E",scope:{user:"=",interaction:"=",buttons:"=",showHotKeys:"=",keyBind:"="},link:function(){},controller:function($scope){$scope.language=language.getText()}}};return["language",UserInteraction]}),define("interactions/directives",["require","angular","common/i18n/languageServices","common/services/displayServices","common/filters","interactions/models","./directives/ActionButton","./directives/ActionButtons","./directives/OperatorInteraction","./directives/UserInteraction"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),displayServices=require("common/services/displayServices"),filters=require("common/filters"),interactionModels=require("interactions/models"),ActionButton=require("./directives/ActionButton"),ActionButtons=require("./directives/ActionButtons"),OperatorInteraction=require("./directives/OperatorInteraction"),UserInteraction=require("./directives/UserInteraction"),moduleName="kasparGUI.interactions.directives",dependancies=[displayServices,languageServices,filters,interactionModels];angular.module(moduleName,dependancies).directive("actionButton",ActionButton).directive("actionButtons",ActionButtons).directive("operatorInteraction",OperatorInteraction).directive("userInteraction",UserInteraction)}return moduleName}),define("interactions/controllers",["require","angular","common/i18n/languageServices","operators/models","users/models","triggers/models","interactions/models","./InteractionController","interactions/directives"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),operatorModels=require("operators/models"),userModels=require("users/models"),triggerModels=require("triggers/models"),interactionModels=require("interactions/models"),InteractionController=require("./InteractionController"),interactionDirectives=require("interactions/directives"),moduleName="kasparGUI.interactions.controllers",dependancies=[operatorModels,languageServices,userModels,triggerModels,interactionModels,interactionDirectives];angular.module(moduleName,dependancies).controller("interactionController",InteractionController)}return moduleName}),define("text!interactions/index.tpl.html",[],function(){return"<ui-view />"}),define("text!interactions/begin.tpl.html",[],function(){return'<div>\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'interaction.operator.label\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			ng-model="operator_id"\r\n			ng-disabled="interaction"\r\n			ng-options="operator.id as operator.fullname for operator in operators | orderBy:\'fullname\'">\r\n			<option value="">{{language[\'interaction.operator.select.prompt\']}}</option>\r\n		</select>\r\n	</div>\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'interaction.user.label\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			ng-model="user_id"\r\n			ng-disabled="interaction"\r\n			ng-options="user.id as user.fullname group by getCategory(user, operator.users) for user in users | orderBy:\'fullname\'">\r\n			<option value="">{{language[\'interaction.user.select.prompt\']}}</option>\r\n		</select>\r\n	</div>\r\n	<robot-interface robot="robot"></robot-interface>\r\n	<div class="btn-toolbar">\r\n		<div class="btn-group">\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-disabled="!(user_id && operator_id && robot.id)"\r\n				ng-if="interaction == null"\r\n				ng-click="start()">{{language[\'interaction.start\']}}</button>\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-if="interaction != null"\r\n				ng-click="stop()">{{language[\'interaction.stop\']}}</button>\r\n		</div>\r\n	</div>\r\n	<tabset ng-show="interaction != null"> <tab\r\n		heading="Operator View"> <operator-interaction\r\n		operator="operator"\r\n		buttons="buttons"\r\n		user="user"\r\n		interaction="interaction"\r\n		key-bind="keyBind"\r\n		show-hot-keys="showHotKeys"></operator-interaction> </tab> <tab\r\n		heading="User View"> <user-interaction\r\n		user="user"\r\n		buttons="buttons"\r\n		interaction="interaction"\r\n		key-bind="keyBind"\r\n		show-hot-keys="showHotKeys"></user-interaction> </tab></tabset>\r\n</div>\r\n'}),define("text!interactions/log.tpl.html",[],function(){return'<h3 class="text-center">Past Interaction View Window</h3>\r\n<strong>TODO</strong>\r\n<ul>\r\n	<li><strong> View details of history </strong></li>\r\n	<li><strong> Merge with Manage screen? </strong></li>\r\n</ul>'}),define("text!interactions/manage.tpl.html",[],function(){return'<h3 class="text-center">Past Interaction Management Window</h3>\r\n<strong>TODO</strong>\r\n<ul>\r\n	<li><strong> Remove history </strong></li>\r\n	<li><strong> Annotate history </strong></li>\r\n	<li>Do we need the ability to prepare an interaction (choose activities, pre-interaction questionnaire)?</li>\r\n	<li>This would a be a good place for the post-interaction questionnaire from the IROMEC project</li>\r\n</ul>\r\n'}),define("categories/interaction",["require","angular","angularUIRouter","interactions/controllers","text!interactions/index.tpl.html","text!interactions/begin.tpl.html","text!interactions/log.tpl.html","text!interactions/manage.tpl.html"],function(require){var angular=require("angular"),uiRouter=require("angularUIRouter"),interactionControllers=require("interactions/controllers"),defaultTemplate=require("text!interactions/index.tpl.html"),beginTemplate=require("text!interactions/begin.tpl.html"),viewTemplate=require("text!interactions/log.tpl.html"),manageTemplate=require("text!interactions/manage.tpl.html"),moduleName="kasparGUI.menu.interaction",dependancies=[uiRouter,interactionControllers],Routes=function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("interaction",{url:"/interaction",template:defaultTemplate,"abstract":!0}).state("interaction.begin",{url:"/begin",template:beginTemplate,controller:"interactionController"}).state("interaction.view",{url:"{id:(?:/[0-9]{1,8})?}/view",template:viewTemplate,controller:"interactionController"}).state("interaction.manage",{url:"{id:(?:/[0-9]{1,8})?}/manage",template:manageTemplate,controller:"interactionController"})},module=angular.module(moduleName,dependancies);return module.config(["$stateProvider","$urlRouterProvider",Routes]),moduleName}),define("text!triggers/directives/buttonTriggerEditor.tpl.html",[],function(){return'<div>\r\n	<ng-form\r\n		name="buttonEditor"\r\n		model="button">\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'trigger.button.name\']}}</span>\r\n		<input\r\n			name="buttonName"\r\n			saveable\r\n			required\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Button Trigger Name"\r\n			ng-model="button.name">\r\n	</div>\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'trigger.button.action\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			saveable\r\n			name="action"\r\n			ng-model="button.action_id"\r\n			ng-options="action.id as action.name group by action.type for action in actions | orderBy:\'name\'">\r\n			<option value="">{{language[\'trigger.button.action.select.prompt\']}}</option>\r\n		</select>\r\n	</div>\r\n	<hotkey-editor\r\n		hotkey="hotkey"\r\n		button="button"\r\n		ng-repeat="hotkey in button.hotKeys"></hotkey-editor>\r\n	<button\r\n		class="btn btn-default"\r\n		type="button"\r\n		ng-click="addButton()">{{language[\'trigger.button.hotkey.new\']}}</button>\r\n	</ng-form>\r\n</div>'}),define("triggers/directives/ButtonTriggerEditor",["require","angular","triggers/models","text!./buttonTriggerEditor.tpl.html"],function(require){require("angular");require("triggers/models");var template=require("text!./buttonTriggerEditor.tpl.html"),ButtonTriggerEditor=function(ButtonHotkey,language){return{template:template,restrict:"E",scope:{button:"=trigger",actions:"="},controller:function($scope){$scope.language=language.getText(),$scope.addButton=function(){void 0===$scope.button.hotKeys&&($scope.button.hotKeys=[]),$scope.button.hotKeys.push(new ButtonHotkey({trigger_id:$scope.button.id}))}}}};return["ButtonHotkey","language",ButtonTriggerEditor]}),define("text!triggers/directives/compoundTriggerEditor.tpl.html",[],function(){return'<form\r\n	name="compountTriggerForm"\r\n	model="compound">\r\n	<div class="row">\r\n		<div class="col-lg-12">\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">Name</span>\r\n				<input\r\n					type="text"\r\n					class="form-control"\r\n					placeholder="Compound Trigger Name"\r\n					saveable\r\n					required\r\n					name="name"\r\n					ng-model="time.name">\r\n			</div>\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">Action</span>\r\n				<select\r\n					class="selectpicker form-control"\r\n					ng-model="time.action_id"\r\n					saveable\r\n					name="actionId"\r\n					ng-options="action.id as action.name group by action.type for action in actions | orderBy:\'name\'">\r\n					<option value="">No Action</option>\r\n				</select>\r\n			</div>\r\n		</div>\r\n	</div>\r\n	<div class="row">\r\n		<strong>TODO:</strong>\r\n		<ul>\r\n			<li>When any selected are active</li>\r\n			<li>When all selected are active</li>\r\n		</ul>\r\n	</div>\r\n</form>'}),define("triggers/directives/CompoundTriggerEditor",["require","angular","text!./compoundTriggerEditor.tpl.html"],function(require){var template=(require("angular"),require("text!./compoundTriggerEditor.tpl.html")),CompoundTriggerEditor=function(language){return{template:template,restrict:"E",scope:{compound:"=trigger",actions:"=",triggers:"="},link:function(){},controller:function($scope){$scope.language=language.getText(),$scope.addTriggers=function(triggers){void 0===$scope.compound.triggers&&($scope.compound.triggers=[]);for(var i=0;i<triggers.length;i++)$scope.compound.triggers.push(triggers[i]);save()};var save=function(){var selfIndex=-1;if(void 0!==$scope.compound.id){for(var i=0;i<$scope.compound.triggers.length;i++)if($scope.compound.triggers[i].id===$scope.compound.id){selfIndex=i;break}}else selfIndex=$scope.compound.triggers.indexOf($scope.compound);$scope.compound.mustStayActive=!0,$scope.compound.time=0,$scope.compound.variance=0,$scope.compound.$save()};$scope.removeTriggers=function(triggers){for(var i=0;i<triggers.length;i++)$scope.time.triggers.splice($scope.time.triggers.indexOf(triggers[i]),1);save()}}}};return["language",CompoundTriggerEditor]}),define("text!triggers/directives/hotkeyEditor.tpl.html",[],function(){return'<ng-form\r\n	name="hotkeyEditor"\r\n	model="hotkey">\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'trigger.button.hotkey.label\']}}</span>\r\n		<input\r\n			type="text"\r\n			name="key"\r\n			class="form-control"\r\n			placeholder="Click here to enter keys"\r\n			saveable\r\n			ng-keydown="updateKey($event, hotkey)"\r\n			ng-model="hotkey.keyString">\r\n		<span class="input-group-btn">\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-click="deleteKey()">{{language[\'trigger.button.hotkey.delete\']}}</button>\r\n		</span>\r\n	</div>\r\n</ng-form>'}),define("triggers/directives/HotkeyEditor",["require","angular","mousetrap","mousetrapPause","common/services/displayServices","text!./hotkeyEditor.tpl.html"],function(require){require("angular");require("mousetrap"),require("mousetrapPause"),require("common/services/displayServices");var template=require("text!./hotkeyEditor.tpl.html"),HotkeyEditor=function(hotkeyFormatter,language){return{template:template,restrict:"E",scope:{hotkey:"=",button:"="},controller:function($scope){$scope.language=language.getText(),$scope.deleteKey=function(){$scope.button.hotKeys.splice($scope.button.hotKeys.indexOf($scope.hotkey),1),void 0!==$scope.hotkey.id&&$scope.hotkey.$delete()},$scope.updateKey=function($event,hotKey){var key=($event.which||$event.keyCode,hotkeyFormatter.getDisplayFromEvent($event));""!==key&&(hotKey.keyString=key,$scope.hotkeyEditor.key.$dirty=!0,$event.preventDefault())}}}};return["hotkeyFormatter","language",HotkeyEditor]}),define("text!triggers/directives/sensorTriggerEditor.tpl.html",[],function(){return'<div>\r\n	<ng-form\r\n		name="sensorEditor"\r\n		model="trigger">\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'trigger.sensor.name\']}}</span>\r\n		<input\r\n			type="text"\r\n			class="form-control"\r\n			placeholder="Sensor Trigger Name"\r\n			name="name"\r\n			saveable\r\n			required\r\n			ng-model="trigger.name">\r\n	</div>\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'trigger.sensor.action\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			saveable\r\n			name="action"\r\n			ng-model="trigger.action_id"\r\n			ng-options="action.id as action.name group by action.type for action in actions | orderBy:\'name\'">\r\n			<option value="">{{language[\'trigger.sensor.action.select.prompt\']}}</option>\r\n		</select>\r\n	</div>\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'trigger.sensor.sensor\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			saveable\r\n			required\r\n			name="sensor"\r\n			ng-model="trigger.sensorName"\r\n			ng-options="sensor.name as sensor.name group by sensor.type for sensor in sensors | orderBy:\'name\'">\r\n			<option value="">{{language[\'trigger.sensor.sensor.select.prompt\']}}</option>\r\n		</select>\r\n	</div>\r\n	<sensor-value-editor\r\n		sensor="selectedSensor"\r\n		trigger="trigger"></sensor-value-editor>\r\n	<div>\r\n		<span>TODO:</span>\r\n		<ul>\r\n			<li>\'ActionSensor\' which triggers on action change</li>\r\n		</ul>\r\n	</div>\r\n	</ng-form>\r\n</div>'}),define("triggers/directives/SensorTriggerEditor",["require","angular","robots/models","text!./sensorTriggerEditor.tpl.html"],function(require){require("angular");require("robots/models");var template=require("text!./sensorTriggerEditor.tpl.html"),SensorTriggerEditor=function(Sensor,Trigger,language){return{template:template,restrict:"E",scope:{trigger:"=",actions:"="},link:function(){},controller:function($scope){$scope.language=language.getText(),$scope.sensors=Sensor.query(),$scope.$watch("trigger.sensorName",function(sensorName){$scope.sensors.$promise.then(function(sensors){if(void 0!==sensorName)for(var i=0;i<sensors.length;i++)if(sensors[i].name==sensorName){$scope.selectedSensor=sensors[i];break}})})}}};return["Sensor","Trigger","language",SensorTriggerEditor]}),define("text!triggers/directives/sensorValueEditor.tpl.html",[],function(){return'<div>\r\n	<div ng-show="sensor">\r\n		<div ng-if="sensor.value_type.type==\'DiscreteValueType\'">TODO:\r\n			Show discrete values</div>\r\n		<div ng-if="sensor.value_type.type==\'ContinuousValueType\'">\r\n			<button\r\n				type="button"\r\n				class="btn btn-primary"\r\n				ng-disabled="true">{{language[\'trigger.sensor.connect\']}}</button>\r\n			{{language[\'trigger.sensor.current\']}}\r\n			<progressbar\r\n				class="progress-striped active"\r\n				max="sensor.value_type.maxValue - sensor.value_type.minValue"\r\n				value="currentValue"> <i>{{current_value}}</i></progressbar>\r\n		</div>\r\n		<accordion close-others="true"> <accordion-group\r\n			is-open="basicopen"> <accordion-heading>\r\n		{{language[\'trigger.sensor.basic.label\']}}<i\r\n			class="pull-right glyphicon"\r\n			ng-class="{\'glyphicon-chevron-down\': basicopen, \'glyphicon-chevron-right\': !basicopen}"></i>\r\n		</accordion-heading>\r\n		<div>\r\n			<div class="btn-group">\r\n				<button\r\n					type="button"\r\n					class="btn btn-primary"\r\n					ng-model="trigger.sensorValue"\r\n					btn-radio="\'eval::on\'">{{language[\'trigger.sensor.basic.on\']}}</button>\r\n				<button\r\n					type="button"\r\n					class="btn btn-primary"\r\n					ng-model="trigger.sensorValue"\r\n					btn-radio="\'eval::off\'">{{language[\'trigger.sensor.basic.off\']}}</button>\r\n			</div>\r\n			<small>{{language[\'trigger.sensor.basic.help.short\']}}</small>\r\n		</div>\r\n		</accordion-group> <accordion-group is-open="advancedopen"> <accordion-heading>\r\n		{{language[\'trigger.sensor.advanced.label\']}} <i\r\n			class="pull-right glyphicon"\r\n			ng-class="{\'glyphicon-chevron-down\': advancedopen, \'glyphicon-chevron-right\': !advancedopen}"></i>\r\n		</accordion-heading>\r\n		<div class="col-lg-12">\r\n			<div class="input-group">\r\n				<div class="input-group-addon inputLabel">{{language[\'trigger.sensor.advanced.compare.label\']}}</div>\r\n				<select\r\n					class="selectpicker form-control"\r\n					name="sensorCompare"\r\n					ng-model="trigger.comparison"\r\n					saveable\r\n					required\r\n					style="width: 25%"\r\n					ng-options="value.compare as (value.name + \' (\' + value.compare + \')\') for value in comparisons">\r\n					<option value="">{{language[\'trigger.sensor.advanced.compare.select.prompt\']}}</option>\r\n				</select>\r\n				<div\r\n					ui-slider\r\n					name="sensorValue"\r\n					saveable\r\n					required\r\n					style="width: 75%"\r\n					class="form-control"\r\n					min="{{sensor.value_type.minValue}}"\r\n					max="{{sensor.value_type.maxValue}}"\r\n					step="{{math.pow(10, -1 * sensor.value_type.precision)}}"\r\n					ng-model="trigger.sensorValue"></div>\r\n				<div\r\n					ng-if="sensor.value_type.type==\'ContinuousValueType\'"\r\n					class="input-group-addon">{{trigger.sensorValue}}</div>\r\n				<div\r\n					ng-if="sensor.value_type.type==\'DiscreteValueType\'"\r\n					class="input-group-addon">TODO: Discrete Values</div>\r\n			</div>\r\n		</div>\r\n		</accordion-group> </accordion>\r\n	</div>\r\n</div>'}),define("triggers/directives/SensorValueEditor",["require","angular","text!./sensorValueEditor.tpl.html"],function(require){var template=(require("angular"),require("text!./sensorValueEditor.tpl.html")),SensorValueEditor=function(Sensor,modelBuilder,language){return{template:template,restrict:"E",scope:{sensor:"=",trigger:"=",currentValue:"=value"},link:function(scope){scope.comparisons=[{name:"less than",compare:"<"},{name:"less or equal to",compare:"<="},{name:"exactly",compare:"=="},{name:"greater or equal to",compare:">="},{name:"greater than",compare:">"}]},controller:function($scope,$window){$scope.language=language.getText(),$scope.Math=$window.Math,$scope.sensor=null,$scope.basicopen=!1,$scope.advancedopen=!0,$scope.$watch("trigger.sensorValue",function(value){void 0!==value&&null!==value&&($scope.basicopen=void 0!==value.indexOf&&0===value.indexOf("eval::"),$scope.advancedopen=!$scope.basicopen)}),$scope.$watch("sensor",function(sensor){if(void 0!==sensor&&void 0!==sensor.id)if(void 0===sensor._link)$scope.sensor=Sensor.get({id:sensor.id}),$scope.sensor.$promise.then(function(){void 0!==$scope.sensor&&($scope.sensor=$scope.sensor.getConcreteClassInstance())});else{var Model=modelBuilder.getModel(sensor._link.model);$scope.model=Model.get({id:$scope.model})}})}}};return["Sensor","modelBuilder","language",SensorValueEditor]}),define("text!triggers/directives/timeTriggerEditor.tpl.html",[],function(){return'<form\r\n	name="timeTriggerForm"\r\n	model="time">\r\n	<div class="row">\r\n		<div class="col-lg-12">\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">{{language[\'trigger.time.name\']}}</span>\r\n				<input\r\n					type="text"\r\n					class="form-control"\r\n					placeholder="Time Trigger Name"\r\n					saveable\r\n					required\r\n					name="name"\r\n					ng-model="time.name">\r\n			</div>\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">{{language[\'trigger.time.action\']}}</span>\r\n				<select\r\n					class="selectpicker form-control"\r\n					ng-model="time.action_id"\r\n					saveable\r\n					name="actionId"\r\n					ng-options="action.id as action.name group by action.type for action in actions | orderBy:\'name\'">\r\n					<option value="">{{language[\'trigger.time.action.select.prompt\']}}</option>\r\n				</select>\r\n			</div>\r\n			<div class="input-group">\r\n				<span class="input-group-addon inputLabel">{{language[\'trigger.time.trigger\']}}</span>\r\n				<select\r\n					class="selectpicker form-control"\r\n					ng-model="time.trigger_id"\r\n					saveable\r\n					name="triggerId"\r\n					ng-options="trigger.id as trigger.name group by trigger.type for trigger in triggers | orderBy:\'name\'">\r\n					<option value="">{{language[\'trigger.time.trigger.select.prompt\']}}</option>\r\n				</select>\r\n			</div>\r\n		</div>\r\n	</div>\r\n	<div class="row">\r\n		<div class="col-lg-12">\r\n			<div class="input-group">\r\n				<div class="input-group-addon inputLabel">{{language[\'trigger.time.time\']}}</div>\r\n				<span class="input-group-btn">\r\n					<button\r\n						type="button"\r\n						class="btn btn-primary"\r\n						ng-model="time.mustStayActive"\r\n						saveable\r\n						required\r\n						name="whileActive"\r\n						btn-radio="true">{{language[\'trigger.time.time.while\']}}</button>\r\n					<button\r\n						type="button"\r\n						class="btn btn-primary"\r\n						saveable\r\n						required\r\n						name="stayActive"\r\n						ng-model="time.mustStayActive"\r\n						btn-radio="false">{{language[\'trigger.time.time.since\']}}</button>\r\n				</span>\r\n				<div\r\n					ui-slider\r\n					name="time"\r\n					saveable\r\n					required\r\n					class="form-control"\r\n					min="0"\r\n					max="300"\r\n					ng-model="time.time"\r\n					step="1"></div>\r\n				<div class="input-group-addon">{{time.time}}\r\n					{{language[\'trigger.time.time.units\']}} &#177;</div>\r\n				<div\r\n					ui-slider\r\n					name="variance"\r\n					saveable\r\n					required\r\n					class="form-control"\r\n					min="0"\r\n					max="{{time.time}}"\r\n					ng-model="time.variance"\r\n					step="1"></div>\r\n				<div class="input-group-addon">{{time.variance}}\r\n					{{language[\'trigger.time.time.units\']}}</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n</form>'}),define("triggers/directives/TimeTriggerEditor",["require","angular","triggers/models","text!./timeTriggerEditor.tpl.html"],function(require){require("angular");require("triggers/models");var template=require("text!./timeTriggerEditor.tpl.html"),TimeTriggerEditor=function(language){return{template:template,restrict:"E",scope:{time:"=trigger",actions:"=",triggers:"="},link:function(){},controller:function($scope){$scope.language=language.getText(),$scope.addTriggers=function(triggers){void 0===$scope.time.triggers&&($scope.time.triggers=[]);for(var i=0;i<triggers.length;i++)$scope.time.triggers.push(triggers[i]);save()};var save=function(){var selfIndex=-1;if(void 0!==$scope.time.id){for(var i=0;i<$scope.time.triggers.length;i++)if($scope.time.triggers[i].id===$scope.time.id){selfIndex=i;break}}else selfIndex=$scope.time.triggers.indexOf($scope.time);selfIndex>=0?($scope.time.triggers.splice(selfIndex,1),$scope.time.selfRef=!0,$scope.time.$save(function(){selfIndex=-1;for(var i=0;i<$scope.time.triggers.length;i++)if($scope.time.triggers[i].id===$scope.time.id){selfIndex=i;break}0>selfIndex&&$scope.time.triggers.push($scope.time)})):$scope.time.$save()};$scope.removeTriggers=function(triggers){for(var i=0;i<triggers.length;i++)$scope.time.triggers.splice($scope.time.triggers.indexOf(triggers[i]),1);save()}}}};return["language",TimeTriggerEditor]}),define("text!triggers/directives/triggerEditor.tpl.html",[],function(){return'<buttontrigger-editor\r\n	ng-if="trigger.type==\'ButtonTrigger\'"\r\n	trigger="trigger"\r\n	actions="actions"></buttontrigger-editor>\r\n<compoundtrigger-editor\r\n	ng-if="trigger.type==\'CompoundTrigger\'"\r\n	trigger="trigger"\r\n	triggers="triggers"\r\n	actions="actions"></compoundtrigger-editor>\r\n<sensortrigger-editor\r\n	ng-if="trigger.type==\'SensorTrigger\'"\r\n	trigger="trigger"\r\n	actions="actions"></sensortrigger-editor>\r\n<timetrigger-editor\r\n	ng-if="trigger.type==\'TimeTrigger\'"\r\n	trigger="trigger"\r\n	triggers="triggers"\r\n	actions="actions"></timetrigger-editor>'}),define("triggers/directives/TriggerEditor",["require","angular","text!./triggerEditor.tpl.html"],function(require){var template=(require("angular"),require("text!./triggerEditor.tpl.html")),TriggerEditor=function($compile,language){return{template:template,restrict:"E",scope:{trigger:"=",triggers:"=",actions:"="},controller:function($scope){$scope.language=language.getText()}}};return["$compile","language",TriggerEditor]}),define("triggers/directives",["require","angular","common/i18n/languageServices","common/services/displayServices","common/filters","triggers/models","robots/models","./directives/ButtonTriggerEditor","./directives/CompoundTriggerEditor","./directives/HotkeyEditor","./directives/SensorTriggerEditor","./directives/SensorValueEditor","./directives/TimeTriggerEditor","./directives/TriggerEditor"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),displayServices=require("common/services/displayServices"),filters=require("common/filters"),triggerModels=require("triggers/models"),robotModels=require("robots/models"),ButtonTriggerEditor=require("./directives/ButtonTriggerEditor"),CompoundTriggerEditor=require("./directives/CompoundTriggerEditor"),HotkeyEditor=require("./directives/HotkeyEditor"),SensorTriggerEditor=require("./directives/SensorTriggerEditor"),SensorValueEditor=require("./directives/SensorValueEditor"),TimeTriggerEditor=require("./directives/TimeTriggerEditor"),TriggerEditor=require("./directives/TriggerEditor"),moduleName="kasparGUI.triggers.directives",dependancies=[displayServices,languageServices,filters,robotModels,triggerModels];angular.module(moduleName,dependancies).directive("buttontriggerEditor",ButtonTriggerEditor).directive("compoundtriggerEditor",CompoundTriggerEditor).directive("hotkeyEditor",HotkeyEditor).directive("sensortriggerEditor",SensorTriggerEditor).directive("sensorValueEditor",SensorValueEditor).directive("timetriggerEditor",TimeTriggerEditor).directive("triggerEditor",TriggerEditor)
}return moduleName}),define("triggers/TriggerController",["require","angular","actions/models","triggers/models","robots/models"],function(require){var angular=require("angular");require("actions/models"),require("triggers/models"),require("robots/models");var TriggerController=function($scope,$http,Action,Trigger,TriggerType,Robot,language){$scope.language=language.getText(),$scope.triggers=Trigger.query(),$scope.actions=Action.query(),$scope.types=TriggerType.query(),$scope.newobjs=[],$scope.setFiles=function(element){$scope.$apply(function($scope){$scope.files=element.files})},$scope.$watch("trigger",function(action){if(void 0!==action){var abstractTrigger=$scope.trigger,concreteTrigger=$scope.trigger.getConcreteClassInstance();concreteTrigger.$promise.then(function(){$scope.triggers[$scope.triggers.indexOf(abstractTrigger)]=concreteTrigger,$scope.trigger=concreteTrigger})}}),$scope.newTrigger=function(){$scope.trigger=new Trigger,$scope.triggers.push($scope.trigger)},$scope.deleteTrigger=function(trigger){$scope.triggers.splice($scope.triggers.indexOf(trigger),1),$scope.trigger=$scope.triggers[0],trigger.$delete()};var errorFunc=function(status){console.log("Error sending file:"+status)},successFunc=function(data){$scope.newobjs.push(data)};$scope.importFiles=function(files){for(var i=0;i<files.length;i++){var fd=new FormData;fd.append("data",files[i]);{$http.post("/api/Trigger/import",fd,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(successFunc).error(errorFunc)}}}};return["$scope","$http","Action","Trigger","TriggerType","Robot","language",TriggerController]}),define("triggers/controllers",["require","angular","common/i18n/languageServices","actions/models","triggers/models","triggers/directives","./TriggerController"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),actionModels=require("actions/models"),triggerModels=require("triggers/models"),triggerDirectives=require("triggers/directives"),TriggerController=require("./TriggerController"),moduleName="kasparGUI.triggers.controllers",dependancies=[actionModels,languageServices,triggerModels,triggerDirectives];angular.module(moduleName,dependancies).controller("triggerController",TriggerController)}return moduleName}),define("text!triggers/index.tpl.html",[],function(){return"<ui-view />"}),define("text!triggers/triggerEdit.tpl.html",[],function(){return'<div\r\n	id="triggersList">\r\n	<div class="input-group">\r\n		<span class="input-group-addon inputLabel">{{language[\'trigger.label\']}}</span>\r\n		<select\r\n			class="selectpicker form-control"\r\n			ng-model="trigger"\r\n			ng-disabled="triggers.length == 0"\r\n			ng-options="item.name group by item.type for item in triggers | orderBy:\'name\'">\r\n			<option value="">{{language[\'trigger.select.prompt\']}}</option>\r\n		</select>\r\n		<span class="input-group-btn">\r\n			<button\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-click="newTrigger()">{{language[\'trigger.new\']}}</button>\r\n			<button\r\n				ng-disabled="!trigger"\r\n				class="btn btn-default"\r\n				type="button"\r\n				ng-click="deleteTrigger(trigger)">{{language[\'trigger.delete\']}}</button>\r\n		</span>\r\n	</div>\r\n	<div ng-show="trigger">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'trigger.type.label\']}}</span>\r\n			<select\r\n				ng-disabled="trigger.id"\r\n				class="selectpicker form-control"\r\n				ng-model="trigger.type"\r\n				ng-options="type.name as type.disp for type in types | orderBy:\'type.disp\'">\r\n				<option value="">{{language[\'trigger.type.select.prompt\']}}</option>\r\n			</select>\r\n		</div>\r\n		<trigger-editor\r\n			trigger="trigger"\r\n			actions="actions"\r\n			triggers="triggers"></trigger-editor>\r\n	</div>\r\n</div>'}),define("text!triggers/triggerTest.tpl.html",[],function(){return'<h3 class="text-center">Trigger Test Window</h3>\r\n<div>Test trigger conditions without running action</div>\r\n<div>\r\n	<strong>TODO</strong>\r\n	<ul>\r\n		<li><strong> Will need to revisit after all triggers are\r\n				available </strong></li>\r\n	</ul>\r\n</div>'}),define("text!triggers/triggerImport.tpl.html",[],function(){return'<div>\r\n	<div class="btn-group">\r\n		<div class="input-group">\r\n			<span class="input-group-addon inputLabel">{{language[\'trigger.import.selectFiles\']}}</span>\r\n			<input\r\n				class="form-control"\r\n				type="file"\r\n				multiple="multiple"\r\n				onchange="angular.element(this).scope().setFiles(this)" />\r\n			<span class="input-group-btn">\r\n				<button\r\n					class="btn btn-default"\r\n					type="button"\r\n					ng-click="importFiles(files)">{{language[\'trigger.import.upload\']}}</button>\r\n			</span>\r\n		</div>\r\n	</div>\r\n	<div>\r\n		<div ng-repeat="obj in newobjs">{{obj}}</div>\r\n	</div>\r\n</div>'}),define("categories/trigger",["require","angular","angularUIRouter","triggers/controllers","text!triggers/index.tpl.html","text!triggers/triggerEdit.tpl.html","text!triggers/triggerTest.tpl.html","text!triggers/triggerImport.tpl.html"],function(require){var angular=require("angular"),uiRouter=require("angularUIRouter"),triggerControllers=require("triggers/controllers"),defaultTemplate=require("text!triggers/index.tpl.html"),editTemplate=require("text!triggers/triggerEdit.tpl.html"),testTemplate=require("text!triggers/triggerTest.tpl.html"),importTemplate=require("text!triggers/triggerImport.tpl.html"),moduleName="kasparGUI.menu.trigger",dependancies=[uiRouter,triggerControllers],Routes=function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("trigger",{url:"/trigger",template:defaultTemplate,"abstract":!0}).state("trigger.edit",{url:"{id:(?:/[0-9]{1,8})?}/edit",template:editTemplate,controller:"triggerController"}).state("trigger.test",{url:"{id:(?:/[0-9]{1,8})?}/test",template:testTemplate,controller:"triggerController"}).state("trigger.import",{url:"/import",template:importTemplate,controller:"triggerController"})},module=angular.module(moduleName,dependancies);return module.config(["$stateProvider","$urlRouterProvider",Routes]),moduleName}),define("common/directives/KeyBinding",["require","angular","mousetrap"],function(require){var angular=require("angular"),Mousetrap=require("mousetrap"),KeyBinding=function($timeout){return{restrict:"E",scope:{invoke:"&"},link:function(scope,element,attrs){attrs.button?Mousetrap.bind(attrs.on,function(){scope.invoke();var elem=angular.element(element).parent().find(attrs.button);elem&&(elem.addClass("active"),$timeout(elem.removeClass("active"),2e3))}):Mousetrap.bind(attrs.on,scope.invoke)},controller:function(){}}};return["$timeout",KeyBinding]}),define("common/directives/Model",["require","angular"],function(require){var Model=(require("angular"),function(modelBuilder){return{restrict:"A",require:"form",link:function(scope,element,attrs,controller){scope.formCtrl=controller,attrs.$observe("model",function(modelName){scope.$watch(modelName,function(modelInstance){scope.model=modelInstance})})},controller:function($scope){this.updateObj=function(modelCtrl){if($scope.formCtrl.$valid){if(void 0===$scope.model.$save){if(void 0===$scope.model._link)return;var Model=modelBuilder.getModel($scope.model._link.model);$scope.model=new Model($scope.model)}$scope.model.$save().then(function(){modelCtrl.$setPristine()})}},this.newObj=function(Type){var newO=new Type;return newO},this.deleteObj=function(item){return item.$delete(function(){})}}}});return["modelBuilder",Model]}),define("text!common/directives/navbar.tpl.html",[],function(){return'<div\r\n	class="col-sm-3 col-md-2 col-lg-2 maxHeight scrollable hidden-print navbar">\r\n	<div class="panel-group">\r\n		<div\r\n			class="panel panel-default"\r\n			ng-repeat="group in groups | orderBy:\'order\'">\r\n			<div class="panel-heading">\r\n				<h4 class="panel-title">{{getText(group.title)}}</h4>\r\n			</div>\r\n			<div class="nav-collapse in">\r\n				<div\r\n					ng-repeat="link in group.links | orderBy:\'order\'"\r\n					ui-sref-active="highlight">\r\n					<a ui-sref="{{link.path}}">{{getText(link.title)}}</a>\r\n				</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n</div>'}),define("common/directives/Navbar",["require","angular","angularUIRouter","common/models","text!./navbar.tpl.html"],function(require){require("angular");require("angularUIRouter");var template=(require("common/models"),require("text!./navbar.tpl.html")),Navbar=function(Menu){return{template:template,restrict:"E",scope:{},controller:function($scope,language){$scope.language=language.getText(),$scope.groups=Menu.query(),$scope.getText=function(key){return $scope.language[key]}}}};return["Menu","language",Navbar]}),define("common/directives/NotEmpty",["require","angular"],function(require){var NotEmpty=(require("angular"),function(){return{restrict:"A",require:"ngModel",link:function(scope,element,attrs,controller){controller.$parsers.unshift(function(value){return void 0===value||""===value?void controller.$setValidity("notEmpty",!1):void controller.$setValidity("notEmpty",!0)})}}});return NotEmpty}),define("common/directives/Saveable",["require","angular"],function(require){var angular=require("angular"),Saveable=function($compile,$timeout){return{restrict:"A",require:["ngModel","^form","^model"],link:function(scope,element,attrs,controllers){var name=controllers[1].$name+"."+controllers[0].$name,updateCalled=!1,parentElement=angular.element(element[0].parentElement),modelCtrl=controllers[0],saveCtrl=controllers[2];scope.$watch(name+".$dirty",function(value){value?parentElement.addClass("has-warning"):parentElement.removeClass("has-warning")}),scope.$watch(name+".$valid",function(value){modelCtrl.$dirty&&(value?parentElement.removeClass("has-error"):parentElement.addClass("has-error"))}),scope.$watch(name+".$pristine",function(value){value?updateCalled&&(parentElement.addClass("has-success"),$timeout(function(){parentElement.removeClass("has-success")},2e3),updateCalled=!1):parentElement.removeClass("has-success")});var callUpdate=function(){modelCtrl.$dirty&&modelCtrl.$valid&&(saveCtrl.updateObj(modelCtrl),updateCalled=!0)};element[0].addEventListener("blur",function(){callUpdate()},!0),element.on("keyup",function($event){var code=$event.which||$event.keyCode;13==code&&callUpdate()})}}};return["$compile","$timeout",Saveable]}),define("common/directives",["require","angular","common/i18n/languageServices","common/services/displayServices","common/filters","./directives/KeyBinding","./directives/Model","./directives/Navbar","./directives/NotEmpty","./directives/Saveable"],function(require){{var angular=require("angular"),languageServices=require("common/i18n/languageServices"),displayServices=require("common/services/displayServices"),filters=require("common/filters"),KeyBinding=require("./directives/KeyBinding"),Model=require("./directives/Model"),Navbar=require("./directives/Navbar"),NotEmpty=require("./directives/NotEmpty"),Saveable=require("./directives/Saveable"),moduleName="kasparGUI.common.directives",dependancies=[displayServices,languageServices,filters];angular.module(moduleName,dependancies).directive("keybinding",KeyBinding).directive("model",Model).directive("navbar",Navbar).directive("notEmpty",NotEmpty).directive("saveable",Saveable)}return moduleName}),define("app",["require","angular","angularUIRouter","angularBoostrap","common/services/modelServices","text!./default.tpl.html","categories/action","categories/admin","categories/interaction","categories/trigger","common/controllers","common/directives","robots/directives","actions/directives"],function(require){var angular=require("angular"),angularRouter=require("angularUIRouter"),angularBootstrap=require("angularBoostrap"),defaultTemplate=(require("common/services/modelServices"),require("text!./default.tpl.html")),action=require("categories/action"),admin=require("categories/admin"),interaction=require("categories/interaction"),trigger=require("categories/trigger"),commonControllers=require("common/controllers"),commonDirectives=require("common/directives"),robotsDirectives=require("robots/directives"),moduleName=(require("actions/directives"),"kasparGUI"),dependancies=[angularRouter,angularBootstrap,commonControllers,commonDirectives,robotsDirectives,action,admin,interaction,trigger],Routes=function($stateProvider,$urlRouterProvider,$locationProvider){$locationProvider.html5Mode(!0),$urlRouterProvider.otherwise("/"),$stateProvider.state("default",{url:"/",template:defaultTemplate})},ApiConfig=function(modelBuilderProvider){modelBuilderProvider.setBasePath("/api")},module=angular.module(moduleName,dependancies);return module.config(["$stateProvider","$urlRouterProvider","$locationProvider",Routes]),module.config(["modelBuilderProvider",ApiConfig]),moduleName})}();
//# sourceMappingURL=app.js.map